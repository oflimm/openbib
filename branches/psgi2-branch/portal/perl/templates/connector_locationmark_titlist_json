[%-

 querystring_without_page = cgiapp.to_cgi_querystring({ exclude = ['page'] });
 start_range     = nav.current_page*qopts.get_option('num')-qopts.get_option('num') + 1;
 end_range       = nav.current_page*qopts.get_option('num');
 IF end_range >= hits ;
    end_range       = hits;
 END;

 records = [];

 FOREACH item IN itemlist ;
   thisdatabase = item.database ;
   thisid       = item.id ;

   item.delete('database','id');

   thisrecord = {
      id = thisid
      database = {
             link = {
                      rel = 'self'
                      href = "${scheme}://${servername}${path_prefix}/${config.get('databases_loc')}/id/${thisdatabase}.json"
             }
             id                = thisdatabase
             description       = dbinfo.get('dbnames').${thisdatabase}.full
             description_short = dbinfo.get('dbnames').${thisdatabase}.short
             url               = dbinfo.get('urls').${thisdatabase}                          
      }
      fields = item      
   };

   records.push(thisrecord);
 END;

   metainformation = {
      locationmark   = {
         base = mark_base
         start_numericrange = mark_numerickrange_start
         end_numericrange = mark_numerickrange_end
      }
      description = signaturdesc
      start_range = start_range
      end_range   = end_range
      hits        = nav.total_entries
      num         = qopts.get_option('num')
      page        = nav.current_page
      ips_user    = qopts.get_option('ips_user')
   };

 IF nav.current_page < nav.last_page ;
   next_page = nav.next_page;
   metainformation.next_page = {
       link = {
            rel = 'self'
            href = "${scheme}://${servername}${path_prefix}/${config.get('connector_locationmark_loc')}.json?page=${next_page};${querystring_without_page}"
       }
   };
 END;

 IF nav.current_page > nav.first_page ;
   previous_page = nav.previous_page;
   metainformation.previous_page = {
       link = {
            rel = 'self'
            href = "${scheme}://${servername}${path_prefix}/${config.get('connector_locationmark_loc')}.json?page=${previous_page};${querystring_without_page}"
       }
   };
 END;

 json_output = {
    link = {
        rel = 'self'
        href = "${scheme}://${servername}${path_prefix}/${config.get('connector_locationmark_loc')}.json?${cgiapp.to_cgi_querystring}"
    }

    meta    = metainformation
    records = records
 };

 to_json(json_output);

%]
