[%#-
#######################################################################
#
# Templatename: virtualsearch_result_item
#
# Typ         : Mastertemplate (2/3)
#
# Aufgabe:
#
# Ausgabe der Suchergebnisse *eines* Katalogs
#
#######################################################################
-%]

[%

   start_range     = nav.current_page*qopts.num-qopts.num + 1;
   end_range       = nav.current_page*qopts.num;
   IF end_range >= fullresultcount ;
      end_range       = fullresultcount;
   END;

   records = [];

   FOREACH record IN recordlist.get_records ;
      thisdatabase = {
         link = {
                 rel = 'self'
                 href = "${scheme}://${servername}${path_prefix}/${config.get('databases_loc')}/id/${record.database}.json"
         }
         id                = record.database
         description       = dbinfo.get('dbnames').${record.database}.full
         description_short = dbinfo.get('dbnames').${record.database}.short
         url               = dbinfo.get('urls').${record.database}                          
      }

      records.push({ id => record.id, database => thisdatabase, fields => record.get_fields });
   END ;



   search_result = {
     link = {
          rel = 'self'
          href = location
     }

     meta = {
              'start_range' = start_range
              'end_range'   = end_range
              'hits'        = fullresultcount
              'ips_user'    = queryoptions.get_option('ips_user')
     }

     records = records

     facets = {
         databases      = facets.database
         persons        = facets.person
         corporatebody  = facets.corporatebody
         classification = facets.classification
         subject        = facets.subject
         year           = facets.year
         mediatype      = facets.mediatype
         language       = facets.language
         tag            = facets.tag
         litlist        = facets.litlist
     }

     filter = searchquery.get_filter

   };

   to_json(search_result);

%]
