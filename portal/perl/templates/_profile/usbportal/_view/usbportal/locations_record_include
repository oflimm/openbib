[%- IF locationinfo.fields.${"L0280"}.first.content -%]
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" charset="UTF-8"/>

    <style>

        .styled-select {
            
            height: 24px;
            overflow: hidden;
            border: 1px solid #ccc;
        }

        
        #btnZuruecksetzen {
            font-family: "Roboto", sans-serif;
            text-transform: uppercase;
            outline: 0;
            color: black;
            /*background: #4CAF50;*/
            width: 100%;
            border: 1;
            padding: 10px;
            
            font-size: 12px;
            -webkit-transition: all 0.3 ease;
            transition: all 0.3 ease;
            cursor: pointer;
        }

        #btnZuruecksetzen:hover {
            background: grey;
        }
        

        #suche {
            width: 100%;
            background: #f2f2f2;
           
        }

        #einstellungen {
            height: 300px;
        }

        .filtersectionMobile {

            padding-left: 5px;
            padding-top: 5px;
            padding-right: 5px;
            padding-bottom: 8px;


            width: 100%;

        }

        #filtersection {

            border-top-style: solid;
            border-top-width: 1px;
            border-right-width: 1px;
            border-right-style: solid;
            border-bottom-width: 1px;
            border-bottom-style: solid;
            border-left-width: 1px;
            border-left-style: solid;
            text-align: center;
            color: white;
            height: 20px;
            background-color: #32475;
            width: 100%;
        }

        .filtersectionDesktop {

            /*height: 80px;*/
            padding-left: 5px;
            padding-top: 5px;
            padding-right: 5px;
            padding-bottom: 8px;

            /*width: 300px;*/
            text-align: left;
        }

        .shadowbox {
            border: 0.3px solid;
            border-color: #e0e0e0;
            box-shadow: 3px 3px #c8c8c8;
            margin-bottom: 10px;
            padding-bottom: 3px;
            padding-top: 3px;
            padding-right: 3px;
        }

        .bib_contentMobile {

            width: 98%;
            transition: height 0.5s, padding 1s, visibility 0.5s;
        }

        .bib_contentDesktop {
            width: 40%;
            overflow: auto;
            border-color: lightblue;
            border-width: 1px;
            border-style: solid;
            border-top-style: solid;
            border-top-width: 1px;
            border-right-width: 1px;
            border-right-style: solid;
            border-bottom-width: 1px;
            border-bottom-style: solid;
            border-left-width: 1px;
            border-left-style: solid;

        }

        #slidediv {
            width: 40px;
            height: 30px;
            background-color: red;
        }

        #block {
            overflow: auto;
            height: 120px;
            border: 0.3px solid;
            border-color: #e0e0e0;
            box-shadow: 3px 3px #c8c8c8;
        }

        #bib_content {
            width: 98%;
            margin-left: 0px;
            padding-left: 5px;
            padding-top: 5px;
            padding-right: 5px;
            padding-bottom: 8px;
            /*transition: height 0.7s, padding 4s, visibility 1s, opacity 0.5s ease-out;*/
        }

        #informationMobile {
            border-radius: 8px;
            width: 99%;
            text-align: center;


            margin-right: 0px;
            margin-left: 0px;


            margin-bottom: 2px;
            padding-right: 5px;
            /*width: 115%;*/
            border-color: lightgrey;
            border-style: solid;
            border-width: 1px;

            /*transition: height 1s, width 1s, padding 1s, visibility 1s, opacity 0.5s ease-out;*/
        }

        #informationDesktop {
            text-align: center;
            width: 40%;
            top: 80px;
            left: 3px;
            border-radius: 8px;
        }


        #institutsChoice {
            width: 90%;
            outline: none;
        }

        #artSelect {
            width: 90%;
            outline: none;
        }

        #textZeitWahl {
            float: right;
        }



		/* GPS */
		
		.leaflet-container .leaflet-control-gps {
			position:relative;
			float:left;
			background:#fff;
			color:#1978cf;
			-moz-border-radius: 4px;
			-webkit-border-radius: 4px;
			border-radius: 4px;
			/*background-color: rgba(0, 0, 0, 0.25);*/
			background-color: rgba(255, 255, 255, 0.8);
			z-index:1;	
			/*box-shadow: 0 1px 7px rgba(0,0,0,0.65);*/
			border: 2px solid rgba(0,0,0,0.2);
			background-clip: padding-box;
			margin-left:10px;
			margin-top:10px;
		}
		.leaflet-control-gps .gps-button {
			display:block;
			float:left;
			width:22px;
			height:22px;
			background-image: url('https://www.ub.uni-koeln.de/e12502/e12523/e33478/e40351/gps_ger.png');
			background-repeat: no-repeat;
			background-position: 1px 1px;
			background-color: #fff;
			border-radius:4px;
			padding: 2px;
			margin: 2px;
		}
		.leaflet-control-gps .gps-button:hover,
		.leaflet-control-gps .gps-button.active:hover {
			background-color: #f4f4f4;
		}
		.leaflet-control-gps .gps-button.loading,
		.leaflet-control-gps .gps-button.loading:hover {
			/*background-position: 1px -28px;*/
		}
		.leaflet-control-gps .gps-button.active {
			/*background-position: 1px -52px;*/
		}
		.leaflet-control-gps .gps-button.disabled {
			background-position: 1px -24px;
		}

		.leaflet-control-gps .gps-alert {
			position:absolute;
			top: 100px;
			left:34px;
			bottom:-1px;
			width:220px;
			padding:2px;
			line-height:1em;
			color:#e00;
			border: 2px solid rgba(0,0,0,0.2);
			background-color: rgba(255, 255, 255, 0.75);
			border-radius:4px;
		}



	
        #tb_cont {
            position: relative;
            width: auto;
        }

        #clear_input {
            width: 12px;
            height: 12px;
            display: inline-block;
            position: absolute;
            right: 8px;
            top: 4px;
            text-align: center;
            background-color: #999999;
            color: #FFFFFF;
            font-size: 10px;
            font-family: monospace;
            border-radius: 10px;
            -o-border-radius: 10px;
            -moz-border-radius: 10px;
            -webkit-border-radius: 10px;
            cursor: pointer;
        }


        /* ****************leaflet.css ****************/

        /* required styles */

        .leaflet-pane,
        .leaflet-tile,
        .leaflet-marker-icon,
        .leaflet-marker-shadow,
        .leaflet-tile-container,
        .leaflet-pane>svg,
        .leaflet-pane>canvas,
        .leaflet-zoom-box,
        .leaflet-image-layer,
        .leaflet-layer {
            position: absolute;
            left: 0;
            top: 0;
        }

        .leaflet-container {
            overflow: hidden;
        }

        .leaflet-tile,
        .leaflet-marker-icon,
        .leaflet-marker-shadow {
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
            -webkit-user-drag: none;
        }

        /* Safari renders non-retina tile on retina better with this, but Chrome is worse */

        .leaflet-safari .leaflet-tile {
            image-rendering: -webkit-optimize-contrast;
        }

        /* hack that prevents hw layers "stretching" when loading new tiles */

        .leaflet-safari .leaflet-tile-container {
            width: 1600px;
            height: 1600px;
            -webkit-transform-origin: 0 0;
        }

        .leaflet-marker-icon,
        .leaflet-marker-shadow {
            display: block;
        }

        /* .leaflet-container svg: reset svg max-width decleration shipped in Joomla! (joomla.org) 3.x */

        /* .leaflet-container img: map is broken in FF if you have max-width: 100% on tiles */

        .leaflet-container .leaflet-overlay-pane svg,
        .leaflet-container .leaflet-marker-pane img,
        .leaflet-container .leaflet-shadow-pane img,
        .leaflet-container .leaflet-tile-pane img,
        .leaflet-container img.leaflet-image-layer {
            max-width: none !important;
            max-height: none !important;
        }

        .leaflet-container.leaflet-touch-zoom {
            -ms-touch-action: pan-x pan-y;
            touch-action: pan-x pan-y;
        }

        .leaflet-container.leaflet-touch-drag {
            -ms-touch-action: pinch-zoom;
            /* Fallback for FF which doesn't support pinch-zoom */
            touch-action: none;
            touch-action: pinch-zoom;
        }

        .leaflet-container.leaflet-touch-drag.leaflet-touch-zoom {
            -ms-touch-action: none;
            touch-action: none;
        }

        .leaflet-container {
            -webkit-tap-highlight-color: transparent;
        }

        .leaflet-container a {
            -webkit-tap-highlight-color: rgba(51, 181, 229, 0.4);
        }

        .leaflet-tile {
            filter: inherit;
            visibility: hidden;
        }

        .leaflet-tile-loaded {
            visibility: inherit;
        }

        .leaflet-zoom-box {
            width: 0;
            height: 0;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
            z-index: 1;
        }

        /* workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=888319 */

        .leaflet-overlay-pane svg {
            -moz-user-select: none;
        }

        .leaflet-pane {
            z-index: 1;
        }

        .leaflet-tile-pane {
            z-index: 1;
        }

        .leaflet-overlay-pane {
            z-index: 1;
        }

        .leaflet-shadow-pane {
            z-index: 1;
        }

        .leaflet-marker-pane {
            z-index: 1;
        }

        .leaflet-tooltip-pane {
            z-index: 1;
        }

        .leaflet-popup-pane {
            z-index: 1;
        }

        .leaflet-map-pane canvas {
            z-index: 1;
        }

        .leaflet-map-pane svg {
            z-index: 1;
        }

        .leaflet-vml-shape {
            width: 1px;
            height: 1px;
        }

        .lvml {
            behavior: url(#default#VML);
            display: inline-block;
            position: absolute;
        }


        /* control positioning */

        .leaflet-control {
            background-color: white;

            position: relative;
            z-index: 1;
            pointer-events: visiblePainted;
            /* IE 9-10 doesn't have auto */
            pointer-events: auto;
        }

        .leaflet-top,
        .leaflet-bottom {

            position: absolute;
            z-index: 1;
            pointer-events: none;
            width: 100%;
        }

        .leaflet-top {
            top: 0;
            float: right;
        }

        .leaflet-right {
            right: 0;
        }

        .leaflet-bottom {
            bottom: 0;
            left: 0;
            right: 0;

        }

        .leaflet-left {

            left: 0;
            right: 0;
        }

        .leaflet-control {

            float: left;
            clear: both;
        }

        .leaflet-right .leaflet-control {
            float: right;
        }

        .leaflet-top .leaflet-control {

            margin-top: 10px;
        }

        .leaflet-bottom .leaflet-control {
            margin-right: 0px;
            margin-left: 0px;
            margin-bottom: 10px;
        }

        .leaflet-left .leaflet-control {
            margin-left: 10px;

        }

        .leaflet-right .leaflet-control {
            margin-right: 10px;
        }


        /* zoom and fade animations */

        .leaflet-fade-anim .leaflet-tile {
            will-change: opacity;
        }

        .leaflet-fade-anim .leaflet-popup {
            opacity: 0;
            -webkit-transition: opacity 0.2s linear;
            -moz-transition: opacity 0.2s linear;
            -o-transition: opacity 0.2s linear;
            transition: opacity 0.2s linear;
        }

        .leaflet-fade-anim .leaflet-map-pane .leaflet-popup {
            opacity: 1;
        }

        .leaflet-zoom-animated {
            -webkit-transform-origin: 0 0;
            -ms-transform-origin: 0 0;
            transform-origin: 0 0;
        }

        .leaflet-zoom-anim .leaflet-zoom-animated {
            will-change: transform;
        }

        .leaflet-zoom-anim .leaflet-zoom-animated {
            -webkit-transition: -webkit-transform 0.25s cubic-bezier(0, 0, 0.25, 1);
            -moz-transition: -moz-transform 0.25s cubic-bezier(0, 0, 0.25, 1);
            -o-transition: -o-transform 0.25s cubic-bezier(0, 0, 0.25, 1);
            transition: transform 0.25s cubic-bezier(0, 0, 0.25, 1);
        }

        .leaflet-zoom-anim .leaflet-tile,
        .leaflet-pan-anim .leaflet-tile {
            -webkit-transition: none;
            -moz-transition: none;
            -o-transition: none;
            transition: none;
        }

        .leaflet-zoom-anim .leaflet-zoom-hide {
            visibility: hidden;
        }


        /* cursors */

        .leaflet-interactive {
            cursor: pointer;
        }

        .leaflet-grab {
            cursor: -webkit-grab;
            cursor: -moz-grab;
        }

        .leaflet-crosshair,
        .leaflet-crosshair .leaflet-interactive {
            cursor: crosshair;
        }

        .leaflet-popup-pane,
        .leaflet-control {
            cursor: auto;
        }

        .leaflet-dragging .leaflet-grab,
        .leaflet-dragging .leaflet-grab .leaflet-interactive,
        .leaflet-dragging .leaflet-marker-draggable {
            cursor: move;
            cursor: -webkit-grabbing;
            cursor: -moz-grabbing;
        }

        /* marker & overlays interactivity */

        .leaflet-marker-icon,
        .leaflet-marker-shadow,
        .leaflet-image-layer,
        .leaflet-pane>svg path,
        .leaflet-tile-container {
            pointer-events: none;
        }

        .leaflet-marker-icon.leaflet-interactive,
        .leaflet-image-layer.leaflet-interactive,
        .leaflet-pane>svg path.leaflet-interactive {
            pointer-events: visiblePainted;
            /* IE 9-10 doesn't have auto */
            pointer-events: auto;
        }

        /* visual tweaks */

        .leaflet-container {
            background: #ddd;
            outline: 0;
        }

        .leaflet-container a {
            color: #0078A8;
        }

        .leaflet-container a.leaflet-active {
            outline: 2px solid orange;
        }

        .leaflet-zoom-box {
            border: 2px dotted #38f;
            background: rgba(255, 255, 255, 0.5);
        }


        /* general typography */

        .leaflet-container {
            font: 12px/1.5 "Helvetica Neue", Arial, Helvetica, sans-serif;
        }


        /* general toolbar styles */

        .leaflet-bar {
            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);
            border-radius: 4px;
        }

        .leaflet-bar a,
        .leaflet-bar a:hover {
            background-color: #fff;
            border-bottom: 1px solid #ccc;
            width: 26px;
            height: 26px;
            line-height: 26px;
            display: block;
            text-align: center;
            text-decoration: none;
            color: black;
        }

        .leaflet-bar a,
        .leaflet-control-layers-toggle {
            background-position: 50% 50%;
            background-repeat: no-repeat;
            display: block;
        }

        .leaflet-bar a:hover {
            background-color: #f4f4f4;
        }

        .leaflet-bar a:first-child {
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
        }

        .leaflet-bar a:last-child {
            border-bottom-left-radius: 4px;
            border-bottom-right-radius: 4px;
            border-bottom: none;
        }

        .leaflet-bar a.leaflet-disabled {
            cursor: default;
            background-color: #f4f4f4;
            color: #bbb;
        }

        .leaflet-touch .leaflet-bar a {
            width: 30px;
            height: 30px;
            line-height: 30px;
        }

        .leaflet-touch .leaflet-bar a:first-child {
            border-top-left-radius: 2px;
            border-top-right-radius: 2px;
        }

        .leaflet-touch .leaflet-bar a:last-child {
            border-bottom-left-radius: 2px;
            border-bottom-right-radius: 2px;
        }

        /* zoom control */

        .leaflet-control-zoom-in,
        .leaflet-control-zoom-out {
            font: bold 18px 'Lucida Console', Monaco, monospace;
            text-indent: 1px;
        }

        .leaflet-touch .leaflet-control-zoom-in,
        .leaflet-touch .leaflet-control-zoom-out {
            font-size: 22px;
        }


        /* layers control */

        .leaflet-control-layers {
            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.4);
            background: #fff;
            border-radius: 5px;
        }

        .leaflet-control-layers-toggle {
            background-image: url(images/layers.png);
            width: 36px;
            height: 36px;
        }

        .leaflet-retina .leaflet-control-layers-toggle {
            background-image: url(images/layers-2x.png);
            background-size: 26px 26px;
        }

        .leaflet-touch .leaflet-control-layers-toggle {
            width: 44px;
            height: 44px;
        }

        .leaflet-control-layers .leaflet-control-layers-list,
        .leaflet-control-layers-expanded .leaflet-control-layers-toggle {
            display: none;
        }

        .leaflet-control-layers-expanded .leaflet-control-layers-list {
            display: block;
            position: relative;
        }

        .leaflet-control-layers-expanded {
            padding: 6px 10px 6px 6px;
            color: #333;
            background: #fff;
        }

        .leaflet-control-layers-scrollbar {
            overflow-y: scroll;
            overflow-x: hidden;
            padding-right: 5px;
        }

        .leaflet-control-layers-selector {
            margin-top: 2px;
            position: relative;
            top: 1px;
        }

        .leaflet-control-layers label {
            display: block;
        }

        .leaflet-control-layers-separator {
            height: 0;
            border-top: 1px solid #ddd;
            margin: 5px -10px 5px -6px;
        }

        /* Default icon URLs */

        .leaflet-default-icon-path {
            background-image: url(images/marker-icon.png);
        }


        /* attribution and scale controls */

        .leaflet-container .leaflet-control-attribution {
            background: #fff;
            background: rgba(255, 255, 255, 0.7);
            margin: 0;
        }

        .leaflet-control-attribution,
        .leaflet-control-scale-line {
            padding: 0 5px;
            color: #333;
        }

        .leaflet-control-attribution a {
            text-decoration: none;
        }

        .leaflet-control-attribution a:hover {
            text-decoration: underline;
        }

        .leaflet-container .leaflet-control-attribution,
        .leaflet-container .leaflet-control-scale {
            font-size: 11px;
        }

        .leaflet-left .leaflet-control-scale {
            margin-left: 5px;
        }

        .leaflet-bottom .leaflet-control-scale {
            margin-bottom: 5px;
        }

        .leaflet-control-scale-line {
            border: 2px solid #777;
            border-top: none;
            line-height: 1.1;
            padding: 2px 5px 1px;
            font-size: 11px;
            white-space: nowrap;
            overflow: hidden;
            -moz-box-sizing: border-box;
            box-sizing: border-box;

            background: #fff;
            background: rgba(255, 255, 255, 0.5);
        }

        .leaflet-control-scale-line:not(:first-child) {
            border-top: 2px solid #777;
            border-bottom: none;
            margin-top: -2px;
        }

        .leaflet-control-scale-line:not(:first-child):not(:last-child) {
            border-bottom: 2px solid #777;
        }

        .leaflet-touch .leaflet-control-attribution,
        .leaflet-touch .leaflet-control-layers,
        .leaflet-touch .leaflet-bar {
            box-shadow: none;
        }

        .leaflet-touch .leaflet-control-layers,
        .leaflet-touch .leaflet-bar {
            border: 2px solid rgba(0, 0, 0, 0.2);
            background-clip: padding-box;
        }


        /* popup */

        .leaflet-popup {
            position: absolute;
            text-align: center;
            margin-bottom: 20px;
        }

        .leaflet-popup-content-wrapper {
            padding: 1px;
            text-align: left;
            border-radius: 12px;
        }

        .leaflet-popup-content {
            margin: 13px 19px;
            line-height: 1.4;
        }

        .leaflet-popup-content p {
            margin: 18px 0;
        }

        .leaflet-popup-tip-container {
            width: 40px;
            height: 20px;
            position: absolute;
            left: 50%;
            margin-left: -20px;
            overflow: hidden;
            pointer-events: none;
        }

        .leaflet-popup-tip {
            width: 17px;
            height: 17px;
            padding: 1px;

            margin: -10px auto 0;

            -webkit-transform: rotate(45deg);
            -moz-transform: rotate(45deg);
            -ms-transform: rotate(45deg);
            -o-transform: rotate(45deg);
            transform: rotate(45deg);
        }

        .leaflet-popup-content-wrapper,
        .leaflet-popup-tip {
            background: white;
            color: #333;
            box-shadow: 0 3px 14px rgba(0, 0, 0, 0.4);
        }

        .leaflet-container a.leaflet-popup-close-button {
            position: absolute;
            top: 0;
            right: 0;
            padding: 4px 4px 0 0;
            border: none;
            text-align: center;
            width: 18px;
            height: 14px;
            font: 16px/14px Tahoma, Verdana, sans-serif;
            color: #c3c3c3;
            text-decoration: none;
            font-weight: bold;
            background: transparent;
        }

        .leaflet-container a.leaflet-popup-close-button:hover {
            color: #999;
        }

        .leaflet-popup-scrolled {
            overflow: auto;
            border-bottom: 1px solid #ddd;
            border-top: 1px solid #ddd;
        }

        .leaflet-oldie .leaflet-popup-content-wrapper {
            zoom: 1;
        }

        .leaflet-oldie .leaflet-popup-tip {
            width: 24px;
            margin: 0 auto;

            -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678)";
            filter: progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678);
        }

        .leaflet-oldie .leaflet-popup-tip-container {
            margin-top: -1px;
        }

        .leaflet-oldie .leaflet-control-zoom,
        .leaflet-oldie .leaflet-control-layers,
        .leaflet-oldie .leaflet-popup-content-wrapper,
        .leaflet-oldie .leaflet-popup-tip {
            border: 1px solid #999;
        }


        /* div icon */

        .leaflet-div-icon {
            background: #fff;
            border: 1px solid #666;
        }


        /* Tooltip */

        /* Base styles for the element that has a tooltip */

        .leaflet-tooltip {
            position: absolute;
            padding: 6px;
            background-color: #fff;
            border: 1px solid #fff;
            border-radius: 3px;
            color: #222;
            white-space: nowrap;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            pointer-events: none;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);
        }

        .leaflet-tooltip.leaflet-clickable {
            cursor: pointer;
            pointer-events: auto;
        }

        .leaflet-tooltip-top:before,
        .leaflet-tooltip-bottom:before,
        .leaflet-tooltip-left:before,
        .leaflet-tooltip-right:before {
            position: absolute;
            pointer-events: none;
            border: 6px solid transparent;
            background: transparent;
            content: "";
        }

        /* Directions */

        .leaflet-tooltip-bottom {
            margin-top: 6px;
        }

        .leaflet-tooltip-top {
            margin-top: -6px;
        }

        .leaflet-tooltip-bottom:before,
        .leaflet-tooltip-top:before {
            left: 50%;
            margin-left: -6px;
        }

        .leaflet-tooltip-top:before {
            bottom: 0;
            margin-bottom: -12px;
            border-top-color: #fff;
        }

        .leaflet-tooltip-bottom:before {
            top: 0;
            margin-top: -12px;
            margin-left: -6px;
            border-bottom-color: #fff;
        }

        .leaflet-tooltip-left {
            margin-left: -6px;
        }

        .leaflet-tooltip-right {
            margin-left: 6px;
        }

        .leaflet-tooltip-left:before,
        .leaflet-tooltip-right:before {
            top: 50%;
            margin-top: -6px;
        }

        .leaflet-tooltip-left:before {
            right: 0;
            margin-right: -12px;
            border-left-color: #fff;
        }

        .leaflet-tooltip-right:before {
            left: 0;
            margin-left: -12px;
            border-right-color: #fff;
        }

        .status_geeoffnet {
            background-color: #6fa706;
            height: auto;
            min-height: 25px;
            text-align: center;
            vertical-align: middle;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 3px;
        }

        .status_geschlossen {
            background-color: #c6185e;
            height: auto;
            min-height: 25px;
            text-align: center;
            vertical-align: middle;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 3px;
        }

        .status_keineInformation {
            background-color: #b1b1b1;
            height: auto;
            min-height: 25px;
            text-align: center;
            vertical-align: middle;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 3px;
        }

        #suchleiste {
            width: 80%;
            margin-left: 10px;
            margin-top: 10px;
            z-index: 2;
            position: relative;
            outline: 0;

            
        }

        #bibnames {
            border: 0.3px solid;
            border-color: #e0e0e0;
            box-shadow: 3px 3px #c8c8c8;
        }

        #filterPanel {
            border-radius: 8px;
            background-color: white;
            position: relative;
            margin-left: 5px;
            z-index: 2;
            border-right-width: 1px;
            border-right-style: solid;
            border-top-width: 1px;
            border-top-style: solid;
            border-bottom-width: 1px;
            border-bottom-style: solid;
            border-left-width: 1px;
            border-left-style: solid;
            width: 80%;
            padding-top: 5px;
            padding-right: 5px;
            padding-bottom: 5px;
            padding-left: 5px;
            
			margin-left: 10px;
            margin-top: 10px;

            max-width: 220px;
        }

        #filterImg {
            -webkit-filter: drop-shadow(1 1 5px black);
            filter: drop-shadow(0 0 4px black);
            margin-top: 10px;
            margin-left: 10px;
            z-index: 2;
            position: relative;
            height: 35px;
            width: 35px;
        }

        #filterImg:hover {
            -webkit-filter: drop-shadow(0 0 4px lightgrey);
            filter: drop-shadow(0 0 4px lightgrey);
            margin-top: 10px;
            margin-left: 10px;
            z-index: 2;
            position: relative;
            height: 35px;
            width: 35px;
        }

        #roundFilter {
            margin-top: 10px;
            margin-left: 10px;

            border-radius: 50%;
            height: 38px;
            width: 38px;
            z-index: 1;
            position: relative;
        }

        #tdArtMark {
            display: none;
        }

        #tdInstMark {
            display: none;
        }

        .activeArea {
            position: absolute;
            top: 50px;
            left: 50px;
            right: 50px;
            height: 200px;
        }

        #map {
            height: 463px;
            width: 920px;
            font: 10pt "Helvetica Neue", Arial, Helvetica, sans-serif;

        }
        
        .my-custom-control {

            -webkit-transition: max-height 10s;
            -moz-transition: max-height 10s;
            -ms-transition: max-height 10s;
            -o-transition: max-height 10s;
            transition: max-height 10s;
            background: #e5feff;
            overflow: hidden;
            max-height: 150;
        }

        #rangevalue {
            width: 80%;
        }


        .my-custom-control {
            padding: 5px 10px;
            background: rgba(0, 0, 0, 0.5);
            color: #fff;
            font-size: 11px;
            line-height: 18px;
            border-radius: 5px;
        }



        .my-custom-control:empty {
            display: none;
        }



        /************ Control.Fullscreen.css****************/

        /*lokal*/

        .fullscreen-icon {
            background-image: url(https://www.ub.uni-koeln.de/e12502/e12523/e33478/e40293/if_fullscreen_118670_ger.png);
        }

        .leaflet-retina .fullscreen-icon {
            background-image: url(https://www.ub.uni-koeln.de/e12502/e12523/e33478/e40293/if_fullscreen_118670_ger.png
        }
            .fullscreen-icon {
                background-image: url(https://www.ub.uni-koeln.de/e12502/e12523/e33478/e40293/if_fullscreen_118670_ger.png);
            }
            .leaflet-retina .fullscreen-icon {
                background-image: url(https://www.ub.uni-koeln.de/e12502/e12523/e33478/e40293/if_fullscreen_118670_ger.png);
                background-size: 26px 26px;
            }


            /* one selector per rule as explained here : http://www.sitepoint.com/html5-full-screen-api/ */
            .leaflet-container:-webkit-full-screen {
                width: 100% !important;
                height: 100% !important;
                z-index: 1;
            }
            .leaflet-container:-ms-fullscreen {
                width: 100% !important;
                height: 100% !important;
                z-index: 1;
            }
            .leaflet-container:full-screen {
                width: 100% !important;
                height: 100% !important;
                z-index: 1;
            }
            .leaflet-container:fullscreen {
                width: 100% !important;
                height: 100% !important;
                z-index: 1;
            }
            .leaflet-pseudo-fullscreen {
                position: fixed !important;
                width: 100% !important;
                height: 100% !important;
                top: 0px !important;
                left: 0px !important;
                z-index: 1;
            }
    </style>


[% IF locations.size > 0 %]

<div id="map">
    <div id="mapDiv"></div>
    <div id="suchleiste"><span id="tb_cont"><input type="search" list="theDataList" placeholder="Bibliothek finden.." name="fname" id="suche" /><span onclick="clearSearch()" style="top: 0px;" id="clear_input">X</span></span>
    </div>
    <!--<button id="roundFilter" onclick="showFilterPanel()"></button>-->
    <img src="https://www.ub.uni-koeln.de/e12502/e12523/e33478/e40292/if_filter_299094_ger.png" id="filterImg" onclick="showFilterPanel()"></img>
    <div id="filterPanel" style="display: none;">
        <div id="einstellungen"></div>
    </div>
</div>
<datalist id="theDataList"></datalist>

<script src="https://kug.ub.uni-koeln.de/js/leaflet.js"></script>

<script src="https://kug.ub.uni-koeln.de/js/jquery-3.3.1.slim.min.js"></script>



<script type="text/javascript">
	var arr = [];
	var arr1 = [];

	/* ++++++++++++++++++++++ GPS +++++++++++++++++++++++++ */
	(function (factory) {
    if(typeof define === 'function' && define.amd) {
    //AMD
        define(['leaflet'], factory);
    } else if(typeof module !== 'undefined') {
    // Node/CommonJS
        module.exports = factory(require('leaflet'));
    } else {
    // Browser globals
        if(typeof window.L === 'undefined')
            throw 'Leaflet must be loaded first';
        factory(window.L);
    }
    })(function (L) {

    L.Control.Gps = L.Control.extend({

	includes: L.version[0] =='1' ? L.Evented.prototype : L.Mixin.Events,
	//
	//Managed Events:
	//	Event			Data passed			Description
	//
	//	gps:located		{marker,latlng}	 	fired after gps marker is located
	//	gps:disabled	{marker}			fired after gps is disabled
	//	gps:error	    {message}			fired after gps error
	//
	//Methods exposed:
	//	Method 			Description
	//
	//  getLocation		return Latlng and marker of current position
	//  activate		active tracking on runtime
	//  deactivate		deactive tracking on runtime
	//
	options: {
		autoActive: false,		//activate control at startup
		autoCenter: false,		//move map when gps location change
		maxZoom: null,			//max zoom for autoCenter
		textErr: '',			//error message on alert notification
		callErr: null,			//function that run on gps error activating
		title: 'Center map on your location',
		marker: null,			//L.Marker used for location, default use a L.CircleMarker
		style: {				//default L.CircleMarker styles
			radius: 5,
			weight: 2,
			color: '#c20',
			opacity: 1,
			fillColor: '#f23',
			fillOpacity: 1
		},
		accuracy: true,		//show accuracy Circle
		position: 'topleft',
		transform: function(latlng) { return latlng },
		//TODO add gpsLayer
		//TODO timeout autoCenter
	},

	initialize: function(options) {
		if(options && options.style)
			options.style = L.Util.extend({}, this.options.style, options.style);
		L.Util.setOptions(this, options);
		this._errorFunc = this.options.callErr || this.showAlert;
		this._isActive = false;
		this._isLoading = false;
		this._currentLocation = null;	//store last location
	},

	onAdd: function (map) {

		this._map = map;

		var container = L.DomUtil.create('div', 'leaflet-control-gps');

		this._button = L.DomUtil.create('a', 'gps-button', container);
		this._button.href = '#';
		this._button.title = this.options.title;

		L.DomEvent
			.on(this._button, 'dblclick', L.DomEvent.stop, this)
			.on(this._button, 'click', L.DomEvent.stop, this)
			.on(this._button, 'click', this._switchGps, this);

		this._alert = L.DomUtil.create('div', 'gps-alert', container);
		this._alert.style.display = 'none';

		this._gpsMarker = this.options.marker ? this.options.marker : new L.CircleMarker([0,0], this.options.style);
		//if(this.options.accuracy)
		//	this._accuracyCircle = new L.Circle([0,0], this.options.style);

		this._map
			.on('locationfound', this._drawGps, this)
			.on('locationerror', this._errorGps, this);

		if(this.options.autoActive)
			this.activate();

		return container;
	},

	onRemove: function(map) {
		this.deactivate();

		map.off('locationfound', this._drawGps, this)
		   .off('locationerror', this._errorGps, this);
	},

	_switchGps: function() {
		if(this._isActive || this._isLoading)
			this.deactivate();
		else
			this.activate();
	},

	getLocation: function() {	//get last location
		return this._currentLocation;
	},

	activate: function() {

		this._isActive = true;
		this._isLoading = true;
		this._map.addLayer( this._gpsMarker );

		L.DomUtil.addClass(this._button, 'loading');
		
		this._map.once('locationfound', function(e) {
			
			L.DomUtil.removeClass(this._button, 'loading');
			L.DomUtil.removeClass(this._button, 'disabled');
			L.DomUtil.addClass(this._button, 'active');

			this._isLoading = false;
			
			if(this.options.autoCenter)
				this._map.setView(e.latlng, this.options.maxZoom || this._map.getZoom());

		}, this);

		this._map.locate({
			enableHighAccuracy: false,
			watch: true,
			setView: false,//this.options.autoCenter,
			//maxZoom: this.options.maxZoom || this._map.getZoom()
		});
	},

	deactivate: function() {
		
		this._isActive = false;
		this._isLoading = false;
		
		L.DomUtil.removeClass(this._button, 'active');
		L.DomUtil.removeClass(this._button, 'loading');

		if(this._map) {
			this._map.stopLocate();
			this._map.removeLayer( this._gpsMarker );
		}		
		
		//this._gpsMarker.setLatLng([-90,0]);  //move to antarctica!
		//TODO make method .hide() using _icon.style.display = 'none'
		this.fire('gps:disabled', {marker: this._gpsMarker});
	},

	_drawGps: function(e) {
		
		var self = this;

		//TODO use e.accuracy for gps circle radius/color
		this._currentLocation = this.options.transform(e.latlng);
		
		this._gpsMarker.setLatLng(this._currentLocation);

		if(this.options.autoCenter) {
			this._map.once('moveend zoomend', function(e) {
				self.fire('gps:located', {
					latlng: self._currentLocation,
					marker: self._gpsMarker
				});
			});
			this._map.panTo(e.latlng);
		}
		else {
			self.fire('gps:located', {
				latlng: self._currentLocation,
				marker: self._gpsMarker
			});
		}
		
		},
		_errorGps: function(e) {
			var errorMsg = e;
			console.log(errorMsg.message)
			alert("message " + errorMsg.message);
			this.fire('gps:error', e);

			this.deactivate();
			this._errorFunc.call(this, this.options.textErr || e.message);
		},

		showAlert: function(text) {
			this._alert.style.display = 'block';
			this._alert.innerHTML = text;
			var that = this;
			clearTimeout(this.timerAlert);
			this.timerAlert = setTimeout(function() {
				that._alert.style.display = 'none';
			}, 5000);
		}
		});

		L.Map.addInitHook(function () {
			if (this.options.gpsControl) {
				this.gpsControl = L.control.gps(this.options.gpsControl);
				this.addControl(this.gpsControl);
			}
		});

		L.control.gps = function (options) {
			return new L.Control.Gps(options);
		};
			return L.Control.Gps;
		});
	
	
	
    /******************active-area**********************/
    (function(previousMethods) {
        if (typeof previousMethods === 'undefined') {
            // Defining previously that object allows you to use that plugin even if you have overridden L.map
            previousMethods = {
                getCenter: L.Map.prototype.getCenter,
                setView: L.Map.prototype.setView,
                setZoomAround: L.Map.prototype.setZoomAround,
                getBoundsZoom: L.Map.prototype.getBoundsZoom,
                PopupAdjustPan: L.Popup.prototype._adjustPan,
                RendererUpdate: L.Renderer.prototype._update
            };
        }


        L.Map.include({
            getBounds: function() {
                if (this._viewport) {
                    return this.getViewportLatLngBounds()
                } else {
                    var bounds = this.getPixelBounds(),
                        sw = this.unproject(bounds.getBottomLeft()),
                        ne = this.unproject(bounds.getTopRight());

                    return new L.LatLngBounds(sw, ne);
                }
            },

            getViewport: function() {
                return this._viewport;
            },

            getViewportBounds: function() {
                var vp = this._viewport,
                    topleft = L.point(vp.offsetLeft, vp.offsetTop),
                    vpsize = L.point(vp.clientWidth, vp.clientHeight);

                if (vpsize.x === 0 || vpsize.y === 0) {
                    //Our own viewport has no good size - so we fallback to the container size:
                    vp = this.getContainer();
                    if (vp) {
                        topleft = L.point(0, 0);
                        vpsize = L.point(vp.clientWidth, vp.clientHeight);
                    }

                }

                return L.bounds(topleft, topleft.add(vpsize));
            },

            getViewportLatLngBounds: function() {
                var bounds = this.getViewportBounds();
                return L.latLngBounds(this.containerPointToLatLng(bounds.min), this.containerPointToLatLng(bounds.max));
            },

            getOffset: function() {
                var mCenter = this.getSize().divideBy(2),
                    vCenter = this.getViewportBounds().getCenter();

                return mCenter.subtract(vCenter);
            },

            getCenter: function(withoutViewport) {
                var center = previousMethods.getCenter.call(this);

                if (this.getViewport() && !withoutViewport) {
                    var zoom = this.getZoom(),
                        point = this.project(center, zoom);
                    point = point.subtract(this.getOffset());

                    center = this.unproject(point, zoom);
                }

                return center;
            },

            setView: function(center, zoom, options) {
                center = L.latLng(center);
                zoom = zoom === undefined ? this._zoom : this._limitZoom(zoom);

                if (this.getViewport()) {
                    var point = this.project(center, this._limitZoom(zoom));
                    point = point.add(this.getOffset());
                    center = this.unproject(point, this._limitZoom(zoom));
                }

                return previousMethods.setView.call(this, center, zoom, options);
            },

            setZoomAround: function(latlng, zoom, options) {
                var vp = this.getViewport();

                if (vp) {
                    var scale = this.getZoomScale(zoom),
                        viewHalf = this.getViewportBounds().getCenter(),
                        containerPoint = latlng instanceof L.Point ? latlng : this.latLngToContainerPoint(latlng),

                        centerOffset = containerPoint.subtract(viewHalf).multiplyBy(1 - 1 / scale),
                        newCenter = this.containerPointToLatLng(viewHalf.add(centerOffset));

                    return this.setView(newCenter, zoom, {
                        zoom: options
                    });
                } else {
                    return previousMethods.setZoomAround.call(this, latlng, zoom, options);
                }
            },

            getBoundsZoom: function(bounds, inside, padding) { // (LatLngBounds[, Boolean, Point]) -> Number
                bounds = L.latLngBounds(bounds);
                padding = L.point(padding || [0, 0]);

                var zoom = this.getZoom() || 0,
                    min = this.getMinZoom(),
                    max = this.getMaxZoom(),
                    nw = bounds.getNorthWest(),
                    se = bounds.getSouthEast(),
                    vp = this.getViewport(),
                    size = (vp ? L.point(vp.clientWidth, vp.clientHeight) : this.getSize()).subtract(padding),
                    boundsSize = this.project(se, zoom).subtract(this.project(nw, zoom)),
                    snap = L.Browser.any3d ? this.options.zoomSnap : 1;

                var scale = Math.min(size.x / boundsSize.x, size.y / boundsSize.y);

                zoom = this.getScaleZoom(scale, zoom);

                if (snap) {
                    zoom = Math.round(zoom / (snap / 100)) * (snap / 100); // don't jump if within 1% of a snap level
                    zoom = inside ? Math.ceil(zoom / snap) * snap : Math.floor(zoom / snap) * snap;
                }

                return Math.max(min, Math.min(max, zoom));
            }
        });

        L.Map.include({
            setActiveArea: function(css, keepCenter, animate) {
                var center;
                if (keepCenter && this._zoom) {
                    // save center if map is already initialized
                    // and keepCenter is passed
                    center = this.getCenter();
                }

                if (!this._viewport) {
                    //Make viewport if not already made
                    var container = this.getContainer();
                    this._viewport = L.DomUtil.create('div', '');
                    container.insertBefore(this._viewport, container.firstChild);
                }

                if (typeof css === 'string') {
                    this._viewport.className = css;
                } else {
                    L.extend(this._viewport.style, css);
                }

                if (center) {
                    this.setView(center, this.getZoom(), {
                        animate: !!animate
                    });
                }
                return this;
            }
        });

        L.Renderer.include({
            _onZoom: function() {
                this._updateTransform(this._map.getCenter(true), this._map.getZoom());
            },

            _update: function() {
                previousMethods.RendererUpdate.call(this);
                this._center = this._map.getCenter(true);
            }
        });

        L.GridLayer.include({
            _updateLevels: function() {

                var zoom = this._tileZoom,
                    maxZoom = this.options.maxZoom;

                if (zoom === undefined) {
                    return undefined;
                }

                for (var z in this._levels) {
                    if (this._levels[z].el.children.length || z === zoom) {
                        this._levels[z].el.style.zIndex = maxZoom - Math.abs(zoom - z);
                    } else {
                        L.DomUtil.remove(this._levels[z].el);
                        this._removeTilesAtZoom(z);
                        delete this._levels[z];
                    }
                }

                var level = this._levels[zoom],
                    map = this._map;

                if (!level) {
                    level = this._levels[zoom] = {};

                    level.el = L.DomUtil.create('div', 'leaflet-tile-container leaflet-zoom-animated', this._container);
                    level.el.style.zIndex = maxZoom;

                    level.origin = map.project(map.unproject(map.getPixelOrigin()), zoom).round();
                    level.zoom = zoom;

                    this._setZoomTransform(level, map.getCenter(true), map.getZoom());

                    // force the browser to consider the newly added element for transition
                    L.Util.falseFn(level.el.offsetWidth);
                }

                this._level = level;

                return level;
            },

            _resetView: function(e) {
                var animating = e && (e.pinch || e.flyTo);
                this._setView(this._map.getCenter(true), this._map.getZoom(), animating, animating);
            },

            _update: function(center) {
                var map = this._map;
                if (!map) {
                    return;
                }
                var zoom = map.getZoom();

                if (center === undefined) {
                    center = map.getCenter(this);
                }
                if (this._tileZoom === undefined) {
                    return;
                } // if out of minzoom/maxzoom

                var pixelBounds = this._getTiledPixelBounds(center),
                    tileRange = this._pxBoundsToTileRange(pixelBounds),
                    tileCenter = tileRange.getCenter(),
                    queue = [];

                for (var key in this._tiles) {
                    this._tiles[key].current = false;
                }

                // _update just loads more tiles. If the tile zoom level differs too much
                // from the map's, let _setView reset levels and prune old tiles.
                if (Math.abs(zoom - this._tileZoom) > 1) {
                    this._setView(center, zoom);
                    return;
                }

                // create a queue of coordinates to load tiles from
                for (var j = tileRange.min.y; j <= tileRange.max.y; j++) {
                    for (var i = tileRange.min.x; i <= tileRange.max.x; i++) {
                        var coords = new L.Point(i, j);
                        coords.z = this._tileZoom;

                        if (!this._isValidTile(coords)) {
                            continue;
                        }

                        var tile = this._tiles[this._tileCoordsToKey(coords)];
                        if (tile) {
                            tile.current = true;
                        } else {
                            queue.push(coords);
                        }
                    }
                }

                // sort tile queue to load tiles in order of their distance to center
                queue.sort(function(a, b) {
                    return a.distanceTo(tileCenter) - b.distanceTo(tileCenter);
                });

                if (queue.length !== 0) {
                    // if its the first batch of tiles to load
                    if (!this._loading) {
                        this._loading = true;
                        // @event loading: Event
                        // Fired when the grid layer starts loading tiles
                        this.fire('loading');
                    }

                    // create DOM fragment to append tiles in one batch
                    var fragment = document.createDocumentFragment();

                    for (i = 0; i < queue.length; i++) {
                        this._addTile(queue[i], fragment);
                    }

                    this._level.el.appendChild(fragment);
                }
            }
        });

        L.Popup.include({
            _adjustPan: function() {
                if (!this._map._viewport) {
                    previousMethods.PopupAdjustPan.call(this);
                } else {
                    if (!this.options.autoPan || (this._map._panAnim && this._map._panAnim._inProgress)) {
                        return;
                    }

                    var map = this._map,
                        vp = map._viewport,
                        containerHeight = this._container.offsetHeight,
                        containerWidth = this._containerWidth,
                        vpTopleft = L.point(vp.offsetLeft, vp.offsetTop),

                        layerPos = new L.Point(
                            this._containerLeft - vpTopleft.x, -containerHeight - this._containerBottom - vpTopleft.y);

                    if (this._zoomAnimated) {
                        layerPos._add(L.DomUtil.getPosition(this._container));
                    }

                    var containerPos = map.layerPointToContainerPoint(layerPos),
                        padding = L.point(this.options.autoPanPadding),
                        paddingTL = L.point(this.options.autoPanPaddingTopLeft || padding),
                        paddingBR = L.point(this.options.autoPanPaddingBottomRight || padding),
                        size = L.point(vp.clientWidth, vp.clientHeight),
                        dx = 0,
                        dy = 0;

                    if (containerPos.x + containerWidth + paddingBR.x > size.x) { // right
                        dx = containerPos.x + containerWidth - size.x + paddingBR.x;
                    }
                    if (containerPos.x - dx - paddingTL.x < 0) { // left
                        dx = containerPos.x - paddingTL.x;
                    }
                    if (containerPos.y + containerHeight + paddingBR.y > size.y) { // bottom
                        dy = containerPos.y + containerHeight - size.y + paddingBR.y;
                    }
                    if (containerPos.y - dy - paddingTL.y < 0) { // top
                        dy = containerPos.y - paddingTL.y;
                    }

                    // @namespace Map
                    // @section Popup events
                    // @event autopanstart
                    // Fired when the map starts autopanning when opening a popup.
                    if (dx || dy) {
                        map
                            .fire('autopanstart')
                            .panBy([dx, dy]);
                    }
                }
            }
        });
    })(window.leafletActiveAreaPreviousMethods);




    /*******************L.Control.custom ***************/
    (function(window, document, undefined) {
        L.Control.Custom = L.Control.extend({
            version: '1.0.1',
            options: {
                position: 'topright',
                id: '',
                title: '',
                classes: '',
                content: '',
                style: {},
                datas: {},
                events: {},
            },
            container: null,
            onAdd: function(map) {
                this.container = L.DomUtil.create('div');
                this.container.id = this.options.id;
                this.container.title = this.options.title;
                this.container.className = this.options.classes;
                this.container.innerHTML = this.options.content;

                for (var option in this.options.style) {
                    this.container.style[option] = this.options.style[option];
                }

                for (var data in this.options.datas) {
                    this.container.dataset[data] = this.options.datas[data];
                }


                /* Prevent click events propagation to map */
                L.DomEvent.disableClickPropagation(this.container);

                /* Prevent right click event propagation to map */
                L.DomEvent.on(this.container, 'contextmenu', function(ev) {
                    L.DomEvent.stopPropagation(ev);
                });

                /* Prevent scroll events propagation to map when cursor on the div */
                L.DomEvent.disableScrollPropagation(this.container);

                for (var event in this.options.events) {
                    L.DomEvent.on(this.container, event, this.options.events[event], this.container);
                }

                return this.container;
            },

            onRemove: function(map) {
                for (var event in this.options.events) {
                    L.DomEvent.off(this.container, event, this.options.events[event], this.container);
                }
            },
        });

        L.control.custom = function(options) {
            return new L.Control.Custom(options);
        };

    }(window, document));

    /********************Control.Fullscreen.js *********/
    (function() {

        L.Control.FullScreen = L.Control.extend({
            options: {
                position: 'topleft',
                title: 'Full Screen',
                titleCancel: 'Exit Full Screen',
                forceSeparateButton: false,
                forcePseudoFullscreen: false,
                fullscreenElement: false
            },

            onAdd: function(map) {
                var className = 'leaflet-control-zoom-fullscreen',
                    container, content = '';

                if (map.zoomControl && !this.options.forceSeparateButton) {
                    container = map.zoomControl._container;
                } else {
                    container = L.DomUtil.create('div', 'leaflet-bar');
                }

                if (this.options.content) {
                    content = this.options.content;
                } else {
                    className += ' fullscreen-icon';
                }

                this._createButton(this.options.title, className, content, container, this.toggleFullScreen, this);

                this._map.on('enterFullscreen exitFullscreen', this._toggleTitle, this);

                return container;
            },

            _createButton: function(title, className, content, container, fn, context) {
                this.link = L.DomUtil.create('a', className, container);
                this.link.href = '#';
                this.link.title = title;
                this.link.innerHTML = content;

                L.DomEvent
                    .addListener(this.link, 'click', L.DomEvent.stopPropagation)
                    .addListener(this.link, 'click', L.DomEvent.preventDefault)
                    .addListener(this.link, 'click', fn, context);

                L.DomEvent
                    .addListener(container, fullScreenApi.fullScreenEventName, L.DomEvent.stopPropagation)
                    .addListener(container, fullScreenApi.fullScreenEventName, L.DomEvent.preventDefault)
                    .addListener(container, fullScreenApi.fullScreenEventName, this._handleEscKey, context);

                L.DomEvent
                    .addListener(document, fullScreenApi.fullScreenEventName, L.DomEvent.stopPropagation)
                    .addListener(document, fullScreenApi.fullScreenEventName, L.DomEvent.preventDefault)
                    .addListener(document, fullScreenApi.fullScreenEventName, this._handleEscKey, context);

                return this.link;
            },

            toggleFullScreen: function() {
                var map = this._map;
                map._exitFired = false;
                if (map._isFullscreen) {
                    if (fullScreenApi.supportsFullScreen && !this.options.forcePseudoFullscreen) {
                        fullScreenApi.cancelFullScreen(this.options.fullscreenElement ? this.options.fullscreenElement : map._container);
                    } else {
                        L.DomUtil.removeClass(this.options.fullscreenElement ? this.options.fullscreenElement : map._container, 'leaflet-pseudo-fullscreen');
                    }
                    map.invalidateSize();
                    map.fire('exitFullscreen');
                    map._exitFired = true;
                    map._isFullscreen = false;
                } else {
                    if (fullScreenApi.supportsFullScreen && !this.options.forcePseudoFullscreen) {
                        fullScreenApi.requestFullScreen(this.options.fullscreenElement ? this.options.fullscreenElement : map._container);
                    } else {
                        L.DomUtil.addClass(this.options.fullscreenElement ? this.options.fullscreenElement : map._container, 'leaflet-pseudo-fullscreen');
                    }
                    map.invalidateSize();
                    map.fire('enterFullscreen');
                    map._isFullscreen = true;
                }
            },

            _toggleTitle: function() {
                this.link.title = this._map._isFullscreen ? this.options.title : this.options.titleCancel;
            },

            _handleEscKey: function() {
                var map = this._map;
                if (!fullScreenApi.isFullScreen(map) && !map._exitFired) {
                    map.fire('exitFullscreen');
                    map._exitFired = true;
                    map._isFullscreen = false;
                }
            }
        });

        L.Map.addInitHook(function() {
            if (this.options.fullscreenControl) {
                this.fullscreenControl = L.control.fullscreen(this.options.fullscreenControlOptions);
                this.addControl(this.fullscreenControl);
            }
        });

        L.control.fullscreen = function(options) {
            return new L.Control.FullScreen(options);
        };

        /* 
        Native FullScreen JavaScript API
        -------------
        Assumes Mozilla naming conventions instead of W3C for now

        source : http://johndyer.name/native-fullscreen-javascript-api-plus-jquery-plugin/

        */

        var
            fullScreenApi = {
                supportsFullScreen: false,
                isFullScreen: function() {
                    return false;
                },
                requestFullScreen: function() {},
                cancelFullScreen: function() {},
                fullScreenEventName: '',
                prefix: ''
            },
            browserPrefixes = 'webkit moz o ms khtml'.split(' ');

        // check for native support
        if (typeof document.exitFullscreen !== 'undefined') {
            fullScreenApi.supportsFullScreen = true;
        } else {
            // check for fullscreen support by vendor prefix
            for (var i = 0, il = browserPrefixes.length; i < il; i++) {
                fullScreenApi.prefix = browserPrefixes[i];
                if (typeof document[fullScreenApi.prefix + 'CancelFullScreen'] !== 'undefined') {
                    fullScreenApi.supportsFullScreen = true;
                    break;
                }
            }
            if (typeof document['msExitFullscreen'] !== 'undefined') {
                fullScreenApi.prefix = 'ms';
                fullScreenApi.supportsFullScreen = true;
            }
        }

        // update methods to do something useful
        if (fullScreenApi.supportsFullScreen) {
            if (fullScreenApi.prefix === 'ms') {
                fullScreenApi.fullScreenEventName = 'MSFullscreenChange';
            } else {
                fullScreenApi.fullScreenEventName = fullScreenApi.prefix + 'fullscreenchange';
            }
            fullScreenApi.isFullScreen = function() {
                switch (this.prefix) {
                    case '':
                        return document.fullscreen;
                    case 'webkit':
                        return document.webkitIsFullScreen;
                    case 'ms':
                        return document.msFullscreenElement;
                    default:
                        return document[this.prefix + 'FullScreen'];
                }
            };
            fullScreenApi.requestFullScreen = function(el) {
                switch (this.prefix) {
                    case '':
                        return el.requestFullscreen();
                    case 'ms':
                        return el.msRequestFullscreen();
                    default:
                        return el[this.prefix + 'RequestFullScreen']();
                }
            };
            fullScreenApi.cancelFullScreen = function() {
                switch (this.prefix) {
                    case '':
                        return document.exitFullscreen();
                    case 'ms':
                        return document.msExitFullscreen();
                    default:
                        return document[this.prefix + 'CancelFullScreen']();
                }
            };
        }

        // jQuery plugin
        if (typeof jQuery !== 'undefined') {
            jQuery.fn.requestFullScreen = function() {
                return this.each(function() {
                    var el = jQuery(this);
                    if (fullScreenApi.supportsFullScreen) {
                        fullScreenApi.requestFullScreen(el);
                    }
                });
            };
        }

        // export api
        window.fullScreenApi = fullScreenApi;
    })();


    /******************leaflet-sidebar.js **********/
    /**
     * @name Sidebar
     * @class L.Control.Sidebar
     * @extends L.Control
     * @param {string} id - The id of the sidebar element (without the # character)
     * @param {Object} [options] - Optional options object
     * @param {string} [options.position=left] - Position of the sidebar: 'left' or 'right'
     * @see L.control.sidebar
     */
    L.Control.Sidebar = L.Control.extend( /** @lends L.Control.Sidebar.prototype */ {
        includes: (L.Evented.prototype || L.Mixin.Events),

        options: {
            position: 'left'
        },

        initialize: function(id, options) {
            var i, child;

            L.setOptions(this, options);

            // Find sidebar HTMLElement
            this._sidebar = L.DomUtil.get(id);

            // Attach .sidebar-left/right class
            L.DomUtil.addClass(this._sidebar, 'sidebar-' + this.options.position);

            // Attach touch styling if necessary
            if (L.Browser.touch)
                L.DomUtil.addClass(this._sidebar, 'leaflet-touch');

            // Find sidebar > div.sidebar-content
            for (i = this._sidebar.children.length - 1; i >= 0; i--) {
                child = this._sidebar.children[i];
                if (child.tagName == 'DIV' &&
                    L.DomUtil.hasClass(child, 'sidebar-content'))
                    this._container = child;
            }

            // Find sidebar ul.sidebar-tabs > li, sidebar .sidebar-tabs > ul > li
            this._tabitems = this._sidebar.querySelectorAll('ul.sidebar-tabs > li, .sidebar-tabs > ul > li');
            for (i = this._tabitems.length - 1; i >= 0; i--) {
                this._tabitems[i]._sidebar = this;
            }

            // Find sidebar > div.sidebar-content > div.sidebar-pane
            this._panes = [];
            this._closeButtons = [];
            for (i = this._container.children.length - 1; i >= 0; i--) {
                child = this._container.children[i];
                if (child.tagName == 'DIV' &&
                    L.DomUtil.hasClass(child, 'sidebar-pane')) {
                    this._panes.push(child);

                    var closeButtons = child.querySelectorAll('.sidebar-close');
                    for (var j = 0, len = closeButtons.length; j < len; j++)
                        this._closeButtons.push(closeButtons[j]);
                }
            }
        },

        /**
         * Add this sidebar to the specified map.
         *
         * @param {L.Map} map
         * @returns {Sidebar}
         */
        addTo: function(map) {
            var i, child;

            this._map = map;

            for (i = this._tabitems.length - 1; i >= 0; i--) {
                child = this._tabitems[i];
                var sub = child.querySelector('a');
                if (sub.hasAttribute('href') && sub.getAttribute('href').slice(0, 1) == '#') {
                    L.DomEvent
                        .on(sub, 'click', L.DomEvent.preventDefault)
                        .on(sub, 'click', this._onClick, child);
                }
            }

            for (i = this._closeButtons.length - 1; i >= 0; i--) {
                child = this._closeButtons[i];
                L.DomEvent.on(child, 'click', this._onCloseClick, this);
            }

            return this;
        },

        /**
         * @deprecated - Please use remove() instead of removeFrom(), as of Leaflet 0.8-dev, the removeFrom() has been replaced with remove()
         * Removes this sidebar from the map.
         * @param {L.Map} map
         * @returns {Sidebar}
         */
        removeFrom: function(map) {
           // console.log('removeFrom() has been deprecated, please use remove() instead as support for this function will be ending soon.');
            this.remove(map);
        },

        /**
         * Remove this sidebar from the map.
         *
         * @param {L.Map} map
         * @returns {Sidebar}
         */
        remove: function(map) {
            var i, child;

            this._map = null;

            for (i = this._tabitems.length - 1; i >= 0; i--) {
                child = this._tabitems[i];
                L.DomEvent.off(child.querySelector('a'), 'click', this._onClick);
            }

            for (i = this._closeButtons.length - 1; i >= 0; i--) {
                child = this._closeButtons[i];
                L.DomEvent.off(child, 'click', this._onCloseClick, this);
            }

            return this;
        },

        /**
         * Open sidebar (if necessary) and show the specified tab.
         *
         * @param {string} id - The id of the tab to show (without the # character)
         */
        open: function(id) {
            var i, child;

            // hide old active contents and show new content
            for (i = this._panes.length - 1; i >= 0; i--) {
                child = this._panes[i];
                if (child.id == id)
                    L.DomUtil.addClass(child, 'active');
                else if (L.DomUtil.hasClass(child, 'active'))
                    L.DomUtil.removeClass(child, 'active');
            }

            // remove old active highlights and set new highlight
            for (i = this._tabitems.length - 1; i >= 0; i--) {
                child = this._tabitems[i];
                if (child.querySelector('a').hash == '#' + id)
                    L.DomUtil.addClass(child, 'active');
                else if (L.DomUtil.hasClass(child, 'active'))
                    L.DomUtil.removeClass(child, 'active');
            }

            this.fire('content', {
                id: id
            });

            // open sidebar (if necessary)
            if (L.DomUtil.hasClass(this._sidebar, 'collapsed')) {
                this.fire('opening');
                L.DomUtil.removeClass(this._sidebar, 'collapsed');
            }

            return this;
        },

        /**
         * Close the sidebar (if necessary).
         */
        close: function() {
            // remove old active highlights
            for (var i = this._tabitems.length - 1; i >= 0; i--) {
                var child = this._tabitems[i];
                if (L.DomUtil.hasClass(child, 'active'))
                    L.DomUtil.removeClass(child, 'active');
            }

            // close sidebar
            if (!L.DomUtil.hasClass(this._sidebar, 'collapsed')) {
                this.fire('closing');
                L.DomUtil.addClass(this._sidebar, 'collapsed');
            }

            return this;
        },

        /**
         * @private
         */
        _onClick: function() {
            if (L.DomUtil.hasClass(this, 'active'))
                this._sidebar.close();
            else if (!L.DomUtil.hasClass(this, 'disabled'))
                this._sidebar.open(this.querySelector('a').hash.slice(1));
        },

        /**
         * @private
         */
        _onCloseClick: function() {
            this.close();
        }
    });

    /**
     * Creates a new sidebar.
     *
     * @example
     * var sidebar = L.control.sidebar('sidebar').addTo(map);
     *
     * @param {string} id - The id of the sidebar element (without the # character)
     * @param {Object} [options] - Optional options object
     * @param {string} [options.position=left] - Position of the sidebar: 'left' or 'right'
     * @returns {Sidebar} A new sidebar instance
     */
    L.control.sidebar = function(id, options) {
        return new L.Control.Sidebar(id, options);
    };

    /************* oms.min.js **/
    (function() {
        /*
         OverlappingMarkerSpiderfier
        https://github.com/jawj/OverlappingMarkerSpiderfier-Leaflet
        Copyright (c) 2011 - 2012 George MacKerron
        Released under the MIT licence: http://opensource.org/licenses/mit-license
        Note: The Leaflet maps API must be included *before* this code
        */
        (function() {
            var q = {}.hasOwnProperty,
                r = [].slice;
            null != this.L && (this.OverlappingMarkerSpiderfier = function() {
                function n(c, b) {
                    var a, e, g, f, d = this;
                    this.map = c;
                    null == b && (b = {});
                    for (a in b) q.call(b, a) && (e = b[a], this[a] = e);
                    this.initMarkerArrays();
                    this.listeners = {};
                    f = ["click", "zoomend"];
                    e = 0;
                    for (g = f.length; e < g; e++) a = f[e], this.map.addEventListener(a, function() {
                        return d.unspiderfy()
                    })
                }
                var d, k;
                d = n.prototype;
                d.VERSION = "0.2.6";
                k = 2 * Math.PI;
                d.keepSpiderfied = !1;
                d.nearbyDistance = 20;
                d.circleSpiralSwitchover = 9;
                d.circleFootSeparation =
                    25;
                d.circleStartAngle = k / 12;
                d.spiralFootSeparation = 28;
                d.spiralLengthStart = 11;
                d.spiralLengthFactor = 5;
                d.legWeight = 1.5;
                d.legColors = {
                    usual: "#222",
                    highlighted: "#f00"
                };
                d.initMarkerArrays = function() {
                    this.markers = [];
                    return this.markerListeners = []
                };
                d.addMarker = function(c) {
                    var b, a = this;
                    if (null != c._oms) return this;
                    c._oms = !0;
                    b = function() {
                        return a.spiderListener(c)
                    };
                    c.addEventListener("click", b);
                    this.markerListeners.push(b);
                    this.markers.push(c);
                    return this
                };
                d.getMarkers = function() {
                    return this.markers.slice(0)
                };
                d.removeMarker = function(c) {
                    var b, a;
                    null != c._omsData && this.unspiderfy();
                    b = this.arrIndexOf(this.markers, c);
                    if (0 > b) return this;
                    a = this.markerListeners.splice(b, 1)[0];
                    c.removeEventListener("click", a);
                    delete c._oms;
                    this.markers.splice(b, 1);
                    return this
                };
                d.clearMarkers = function() {
                    var c, b, a, e, g;
                    this.unspiderfy();
                    g = this.markers;
                    c = a = 0;
                    for (e = g.length; a < e; c = ++a) b = g[c], c = this.markerListeners[c], b.removeEventListener("click", c), delete b._oms;
                    this.initMarkerArrays();
                    return this
                };
                d.addListener = function(c, b) {
                    var a,
                        e;
                    (null != (e = (a = this.listeners)[c]) ? e : a[c] = []).push(b);
                    return this
                };
                d.removeListener = function(c, b) {
                    var a;
                    a = this.arrIndexOf(this.listeners[c], b);
                    0 > a || this.listeners[c].splice(a, 1);
                    return this
                };
                d.clearListeners = function(c) {
                    this.listeners[c] = [];
                    return this
                };
                d.trigger = function() {
                    var c, b, a, e, g, f;
                    b = arguments[0];
                    c = 2 <= arguments.length ? r.call(arguments, 1) : [];
                    b = null != (a = this.listeners[b]) ? a : [];
                    f = [];
                    e = 0;
                    for (g = b.length; e < g; e++) a = b[e], f.push(a.apply(null, c));
                    return f
                };
                d.generatePtsCircle = function(c, b) {
                    var a, e,
                        g, f, d;
                    g = this.circleFootSeparation * (2 + c) / k;
                    e = k / c;
                    d = [];
                    for (a = f = 0; 0 <= c ? f < c : f > c; a = 0 <= c ? ++f : --f) a = this.circleStartAngle + a * e, d.push(new L.Point(b.x + g * Math.cos(a), b.y + g * Math.sin(a)));
                    return d
                };
                d.generatePtsSpiral = function(c, b) {
                    var a, e, g, f, d;
                    g = this.spiralLengthStart;
                    a = 0;
                    d = [];
                    for (e = f = 0; 0 <= c ? f < c : f > c; e = 0 <= c ? ++f : --f) a += this.spiralFootSeparation / g + 5E-4 * e, e = new L.Point(b.x + g * Math.cos(a), b.y + g * Math.sin(a)), g += k * this.spiralLengthFactor / a, d.push(e);
                    return d
                };
                d.spiderListener = function(c) {
                    var b, a, e, g, f, d, h, k, l;
                    (b = null !=
                        c._omsData) && this.keepSpiderfied || this.unspiderfy();
                    if (b) return this.trigger("click", c);
                    g = [];
                    f = [];
                    d = this.nearbyDistance * this.nearbyDistance;
                    e = this.map.latLngToLayerPoint(c.getLatLng());
                    l = this.markers;
                    h = 0;
                    for (k = l.length; h < k; h++) b = l[h], this.map.hasLayer(b) && (a = this.map.latLngToLayerPoint(b.getLatLng()), this.ptDistanceSq(a, e) < d ? g.push({
                        marker: b,
                        markerPt: a
                    }) : f.push(b));
                    return 1 === g.length ? this.trigger("click", c) : this.spiderfy(g, f)
                };
                d.makeHighlightListeners = function(c) {
                    var b = this;
                    return {
                        highlight: function() {
                            return c._omsData.leg.setStyle({
                                color: b.legColors.highlighted
                            })
                        },
                        unhighlight: function() {
                            return c._omsData.leg.setStyle({
                                color: b.legColors.usual
                            })
                        }
                    }
                };
                d.spiderfy = function(c, b) {
                    var a, e, g, d, p, h, k, l, n, m;
                    this.spiderfying = !0;
                    m = c.length;
                    a = this.ptAverage(function() {
                        var a, b, e;
                        e = [];
                        a = 0;
                        for (b = c.length; a < b; a++) k = c[a], e.push(k.markerPt);
                        return e
                    }());
                    d = m >= this.circleSpiralSwitchover ? this.generatePtsSpiral(m, a).reverse() : this.generatePtsCircle(m, a);
                    a = function() {
                        var a, b, k, m = this;
                        k = [];
                        a = 0;
                        for (b = d.length; a < b; a++) g = d[a], e = this.map.layerPointToLatLng(g), n = this.minExtract(c, function(a) {
                            return m.ptDistanceSq(a.markerPt,
                                g)
                        }), h = n.marker, p = new L.Polyline([h.getLatLng(), e], {
                            color: this.legColors.usual,
                            weight: this.legWeight,
                            clickable: !1
                        }), this.map.addLayer(p), h._omsData = {
                            usualPosition: h.getLatLng(),
                            leg: p
                        }, this.legColors.highlighted !== this.legColors.usual && (l = this.makeHighlightListeners(h), h._omsData.highlightListeners = l, h.addEventListener("mouseover", l.highlight), h.addEventListener("mouseout", l.unhighlight)), h.setLatLng(e), h.setZIndexOffset(1E6), k.push(h);
                        return k
                    }.call(this);
                    delete this.spiderfying;
                    this.spiderfied = !0;
                    return this.trigger("spiderfy", a, b)
                };
                d.unspiderfy = function(c) {
                    var b, a, e, d, f, k, h;
                    null == c && (c = null);
                    if (null == this.spiderfied) return this;
                    this.unspiderfying = !0;
                    d = [];
                    e = [];
                    h = this.markers;
                    f = 0;
                    for (k = h.length; f < k; f++) b = h[f], null != b._omsData ? (this.map.removeLayer(b._omsData.leg), b !== c && b.setLatLng(b._omsData.usualPosition), b.setZIndexOffset(0), a = b._omsData.highlightListeners, null != a && (b.removeEventListener("mouseover", a.highlight), b.removeEventListener("mouseout", a.unhighlight)), delete b._omsData, d.push(b)) :
                        e.push(b);
                    delete this.unspiderfying;
                    delete this.spiderfied;
                    this.trigger("unspiderfy", d, e);
                    return this
                };
                d.ptDistanceSq = function(c, b) {
                    var a, e;
                    a = c.x - b.x;
                    e = c.y - b.y;
                    return a * a + e * e
                };
                d.ptAverage = function(c) {
                    var b, a, e, d, f;
                    d = a = e = 0;
                    for (f = c.length; d < f; d++) b = c[d], a += b.x, e += b.y;
                    c = c.length;
                    return new L.Point(a / c, e / c)
                };
                d.minExtract = function(c, b) {
                    var a, d, g, f, k, h;
                    g = k = 0;
                    for (h = c.length; k < h; g = ++k)
                        if (f = c[g], f = b(f), "undefined" === typeof a || null === a || f < d) d = f, a = g;
                    return c.splice(a, 1)[0]
                };
                d.arrIndexOf = function(c, b) {
                    var a,
                        d, g, f;
                    if (null != c.indexOf) return c.indexOf(b);
                    a = g = 0;
                    for (f = c.length; g < f; a = ++g)
                        if (d = c[a], d === b) return a;
                    return -1
                };
                return n
            }())
        }).call(this);
    }).call(this);
    /* Mon 14 Oct 2013 10:54:59 BST */


	

</script>


<script>
    var institute = initInsts();
    var koordinaten = initCoords();
    var ints = [];

    var marks = [];
    var markers = new L.FeatureGroup();
    var browser = detectBrowser();
    var gewaehlteZeit;
    var tageChoice;
    var showMarkerText = false;
    var indoorTextePermanentZeigen = true;

    //icons
    var greenIc;
    var redIc;
    var greyIc;

    var semester;
    var feiertag;
    var gewaehlterTag = 9;
    var savedFakultaet = 8;
    var foundInsts = [];
    var zoomfaktor = 13;

    var artSelect = $('#artSelect');
    var institutsChoice = $('#institutsChoice');
    var nurGeoeffnet = $('#geoeffnet');
    var geojsonLayer = new L.FeatureGroup();

    var geojsonLayerDisplayed = false;
    var nurLagePlan = false;
    var markerclicked = false;
    var isLoaded = false;
    var mapWidth;
    var isMobile;
    var isSidebarClosed;
    var bib_contentWidth;
    var stufe = 0;
    var lock = false;
    var firedMarker;
    var tempName;
    var tempZeiten;
    var contentHeight;
    var contentWidth;
    var startY;
    var startX;

    var dragicon = 'https://www.ub.uni-koeln.de/e12502/e12523/e33478/e40291/dragger_ger.png';

	// die activeArea verlegt en Mittelpunkt der Karte und berechnet Overlays mit ein
    var activearea = "position: 'absolute', top: '50px', left: '50px', right: '50px', height: '200px'";

	// setzt die Grenzen der Karte, verhindert das Laden unnötiger Kartentiles
    var southWest = L.latLng(50.815038, 6.788887),
        northEast = L.latLng(51.033254, 7.140412),
        mapbounds = L.latLngBounds(southWest, northEast);

    var map = L.map('map', {
        zoomControl: true,
        maxBounds: mapbounds,
        minZoom: 10,
        fullscreenControl: true,
        //gestureHandling: true,
        fullscreenControlOptions: {
            position: 'topright'
        }
	
    }).setActiveArea({
        position: 'absolute',
        top: '50px',
        left: '50px',
        right: '50px',
        height: '200px'
    });

	// GPS
	var gps = new L.Control.Gps({
		position: 'topright',
		autoCenter:true
	});

	// hier könnte eine Warnung implementiert werden, dass die Positionsbestimmung durch WLAN nicht unbedingt korrekt sein muss
	gps.on('gps:located', function(e) {
		//e.marker.bindPopup("Positionsbestimmung am PC u.U. nicht korrekt").openPopup()
		})
		.on('gps:disabled', function(e) {
			e.marker.closePopup()
		});
	gps.addTo(map);
	
	// var zoomfaktor nach zoom-event aktualisieren
    map.on('zoomend', function() {
        zoomfaktor = map.getZoom();
    });

    var oms = new OverlappingMarkerSpiderfier(map, {
		// hält das Spiderfy-Layout offen wenn auf einen Marker geklickt wurde
        keepSpiderfied: true,
    });

    var popup = new L.Popup();

    oms.addListener('click', function(marker) {
        if (marker.sig.length > 1) {
            marker.bounce({
                duration: 1500,
                height: 100
            });
            $('#bib_content').show();
        }
    });

    map.on('click', function(e) {
		var id;
		var className;
		var localName;
		
		// Firefox
		try { 
			id = e.originalEvent.explicitOriginalTarget.id;
			className = e.originalEvent.explicitOriginalTarget.className;
			localName = e.originalEvent.explicitOriginalTarget.localName;			
		}
		// Internet Explorer
		catch (e1) { 
			id = e.originalEvent.srcElement.id;
			className = e.originalEvent.srcElement.className;
			localName = e.originalEvent.srcElement.localName;
		}	
	
		if(localName !== 'option' && localName !== 'label') {
			if(id) {
				if(id.length === 0 || id == "map") {
					if(className.length === 0 || id == "map" && localName !== 'option') { // activeArea geklickt
						if($('#filterPanel').length)
							showFilterPanel();
					}
				}
			}
		}
    });

    map.on('mousemove', function(e) {
		var id;
		var className;
		var localName;
        

		// Firefox
		try { 
			id = e.originalEvent.explicitOriginalTarget.id;
			className = e.originalEvent.explicitOriginalTarget.className;
			localName = e.originalEvent.explicitOriginalTarget.localName;			
		}
		// Internet Explorer
		catch (e1) { 
			id = e.originalEvent.srcElement.id;
			className = e.originalEvent.srcElement.className;
			localName = e.originalEvent.srcElement.localName;
		}	
        
		if(document.getElementById('filterPanel').style.display === 'block') {
			if(id === 'rangevalue' || id === 'suche' || className === 'shadowbox' || id === 'einstellungen') {
				map.dragging.disable();
            }
			else	
				map.dragging.enable();	
		}
    });
	
	
	// Marker-Symbole initialisieren
function initIcons() {
    greenIc = L.icon({
        iconUrl: 'https://www.ub.uni-koeln.de/dev/zoepfgen/resources/pins/pin_lindgruen.png',
        iconSize: [19, 29],
    });
    redIc = L.icon({
        iconUrl: 'https://www.ub.uni-koeln.de/dev/zoepfgen/resources/pins/pin_pink.png',
        iconSize: [19, 29],
    });
    greyIc = L.icon({
        iconUrl: 'https://www.ub.uni-koeln.de/dev/zoepfgen/resources/pins/pin_grau.png',
        iconSize: [19, 29],
    });
}

function initTageSelect() {
    var tageChoice = $('#tageChoice');
    $(tageChoice).on('change', function(e) {
        changeDay($(this).val());
    });

    $(tageChoice).append($('<option>', {value:9, text:'Heute'}));
    $(tageChoice).append($('<option>', {value:0, text:'Montag'}));
    $(tageChoice).append($('<option>', {value:1, text:'Dienstag'}));
    $(tageChoice).append($('<option>', {value:2, text:'Mittwoch'}));
    $(tageChoice).append($('<option>', {value:3, text:'Donnerstag'}));
    $(tageChoice).append($('<option>', {value:4, text:'Freitag'}));
    $(tageChoice).append($('<option>', {value:5, text:'Samstag'}));
    $(tageChoice).append($('<option>', {value:6, text:'Sonntag'}));
    
    $(tageChoice).addClass('styled-select');

    $('#btnZuruecksetzen').click(function() {
        setTimeNow();
    });
}

function initFields() {

    // ARTSELECT
    var artSelect = $('#artSelect');
    $(artSelect).on('change', function(e) {
        calcMarkers(9, false);
    });

    $(artSelect).append($('<option>', {value:0, text:'Art der Bibliothek'}));
    $(artSelect).append($('<option>', {value:1, text:'nur Präsenzbibliotheken'}));
    $(artSelect).append($('<option>', {value:2, text:'nur Ausleihbibliotheken'}));
    $(artSelect).width('215px');

    $(artSelect).on('click', function() {
        if($('#artSelect option[value=0]').text() != 'Präsenz- und Ausleihbibliotheken')
            $('#artSelect option[value=0]').text('Präsenz- und Ausleihbibliotheken');
    });
    $(artSelect).addClass('styled-select');

    // BIBLIOTHEKSWAHL
    var institutsChoice = $('#institutsChoice');
    $(institutsChoice).on('change', function(e) {
        calcMarkers(this.value, false);
    });

    $(institutsChoice).on('click', function() {
        if ($('#institutsChoice option[value=8]').text() != "Alle")
            $('#institutsChoice option[value=8]').text("Alle");
    }, false);
    

    $(institutsChoice).append($('<option>', {value:8, text:'Auswahl nach Fakultäten'}));
    $(institutsChoice).append($('<option>', {value:'DE-38-0', text:'000 - ungebunden/übergreifend'}));
    $(institutsChoice).append($('<option>', {value:'DE-38-1', text:'100 - WiSo'}));
    $(institutsChoice).append($('<option>', {value:'DE-38-2', text:'200 - Rechtswissenschaften'}));
    $(institutsChoice).append($('<option>', {value:'DE-38-3', text:'300 - HumFak'}));
    $(institutsChoice).append($('<option>', {value:'DE-38-4', text:'400 - Philo'}));
    $(institutsChoice).append($('<option>', {value:'DE-38-5', text:'500 - MatNat'}));
    $(institutsChoice).width('215px');
    $(institutsChoice).addClass('styled-select');
    
    $('#geoeffnet').on('change', function() {
        calcMarkers(9, false);
    });

    var showText = document.getElementById('showMarkerText');
    showText.onchange = function() {
        if (showText.checked)
            showMarkerText = true;
        else
            showMarkerText = false;

        calcMarkers(9, false);
    }
}

/**
 * erstellt Text bei Auswahl eines Markers
 *
 * @param {string} name des Instituts
 * @param {boolean} - nicht mehr in Gebrauch -
 */
function showPopupText(text, mitInfo) {
    tempText = text;
    tempInfo = mitInfo;
    for (var t = 0; t < institute.length; t++) {
        if (institute[t].name == text) {
            var s1 = "";
            var zeiten = parse(institute[t].zeiten);
            var curTag;
            var curTime;
            var print;
            var now = new Date();

            if ($("#tageChoice") != null) { // einstellungen schonmal geladen
                curTag = $('#tageChoice :selected').text();
            } else if ($("#tageChoice") == null) { // einstellungen noch nicht geladen
                print = 'Zurzeit';
            }

            var zeitJetzt = gewaehlteZeit > now.getHours() + "" + addZero(now.getMinutes() - 20) && gewaehlteZeit < now.getHours() + "" + addZero(now.getMinutes() + 20);


            if (curTag == undefined) {
                curTag = "Heute";
            }

            if (zeitJetzt && curTag == 'Heute') {
                print = "Zurzeit";
            } else if (zeitJetzt && curTag != 'Heute') {
                print = curTag + " um diese Zeit ";
            } else if (!zeitJetzt && curTag == 'Heute') {
                if (gewaehlteZeit.length == 4)
                    print = "Heute um " + gewaehlteZeit[0] + gewaehlteZeit[1] + ":" + gewaehlteZeit[2] + gewaehlteZeit[3] + " Uhr";
                else if (gewaehlteZeit.length == 3)
                    print = "Heute um " + gewaehlteZeit[0] + ":" + gewaehlteZeit[1] + gewaehlteZeit[2] + " Uhr";
            } else if (!zeitJetzt && curTag != 'Heute') {
                if (gewaehlteZeit.length == 4)
                    print = curTag + " um " + gewaehlteZeit[0] + gewaehlteZeit[1] + ":" + gewaehlteZeit[2] + gewaehlteZeit[3] + " Uhr";
                else if (gewaehlteZeit.length == 3)
                    print = curTag + " um " + gewaehlteZeit[0] + ":" + gewaehlteZeit[1] + gewaehlteZeit[2] + " Uhr";
            }

            var s1 = '';
            var status = '';
            var arbeitsplaetze = '';
	    
            var nameLink = institute[t].name;

            // xxx: hier gehts nicht ganz gut zu -> zeiten == 1 überschreibt wohl 'USB KÖLN'-link
            if (institute[t].sigel.match(/DE-38-[0-9]{0,3}$/))
                nameLink = '<a id="linktitel" target="blank" href="/lernen_arbeiten/bibliotheken/38_' + institute[t].sigel.replace(/DE-38-/g, "") + '/index_ger.html">' + institute[t].name + '</a>';

            else if (institute[t].sigel.match(/DE-38-HWA/))
                nameLink = '<a id="linktitel" target="blank" href="https://www.ub.uni-koeln.de/ueber_uns/dach/hwa/index_ger.html">' + institute[t].name + '</a>';

            else if (institute[t].sigel.match(/^DE-38$/))
                nameLink = '<a id="linktitel" target="blank" href="https://www.ub.uni-koeln.de/index.html">' + institute[t].name + '</a>';
            else if (institute[t].url.match(/http/) && !institute[t].url.match(/href/))
                nameLink = '<a id="linktitel" target="blank" href="' + institute[t].url + '">' + institute[t].name + '</a>';


            if (institute[t].arbeitsplaetze != '' )
                arbeitsplaetze = '<br/><p><strong>Arbeitsplätze für Nutzer:</strong> '+institute[t].arbeitsplaetze + '</p>';

            if (zeiten === 1){ // test mit öffnen div auch als link zu institutsseite
 //             if (institute[t].sigel.match(/DE-38-[0-9]{0,3}$/)) {
 //               status = '<a id="linktitel" target="blank" href="/lernen_arbeiten/bibliotheken/38_' + institute[t].sigel.replace(/DE-38-/g, "") + '/index_ger.html">' + '<div class="status_geeoffnet" id="status"><strong id="strong" style="color: white">' + print + ' geöffnet</strong></div></a>';
//              }
//              else {
                status = '<div class="status_geeoffnet" id="status"><strong id="strong" style="color: white">' + print + ' geöffnet</strong></div>';
//              }
            }
            else if (zeiten === 2)
                status = '<div id="status" class="status_geschlossen"><strong id="strong" style="color: white">' + print + ' geschlossen</strong></div>';
            else if (zeiten === 'undefined' || zeiten === 0)
                status = '<div id="status" class="status_keineInformation"><strong id="strong" style="color: black">Keine Informationen</strong></div>';


            displayFromMobile = institute[t].sigel;
            return "<div id='bibnames'><h4 id='bibtitel' style='text-align: center; margin-top: 5px; margin-bottom: 10px'>" + nameLink + "</h4>" + status + arbeitsplaetze + "</div><br>";
        }
    }
}



function mouseUp1() {
    $(window).off('touchmove', divMove1);
}

function mouseUpDesktop() {
    $(window).off('mousemove', divMoveDesktop);
}

function mouseUp2() {
    $(window).off('mousemove', divMove2);
}

function mouseUp3() {
    $(window).off('mousemove', divMove3);
}




function mouseDown(e) {
    className = e.target.className;
    
    var target = e.target.id;
    if (target != 'block') {
        if (!isMobile) {
            startY = e.clientY;
            startX = e.clientX;
        } else if (isMobile) {
            startY = e.touches[0].clientY;
            startX = e.touches[0].clientX;
        }

        if (isMobile) {
            if (target != 'block' && target == 'bib_content' || target == 'dragicon' || target == 'bibtitel' || target == 'informationMobile' || target == 'linktitel' || target == 'bibnames' || target == "status" || target == "strong") {
                $(window).bind('touchmove', divMove1);
            } else if (className == 'filtersectionMobile') {
                $(window).bind('touchmove', divMove2);
            }
        } else if (e.target.id == 'einstellungen')
            $(window).bind('mousemove', divMove2);
    }
}

function divMoveDesktop(e) {
    $('#informationDesktop').width(contentWidth - (startX - e.clientX) + 'px');
    $('#bib_content').width(contentWidth - (startX - e.clientX) + 'px');
    var div = $('#bib_content');

    if ($(div).width().replace('px', '') <= 30) {
        $(div).hide();
        $(div).width('auto');
        $('#informationDesktop').width('230px');
    }
}

function divMove1(e) {
    lock = true;
    dragiconClicked();

}

function divMove2(e) {
    var div = $('#einstellungen');
    $(div).height(contentHeight - (e.touches[0].clientY - startY) + 'px');
    if ($(div).height().replace('px', '') <= 30 || (e.touches[0].clientY - startY * 1.9) > ($(div).height().replace('px', '') / 2)) {
        $(div).hide();
        $(div).height('310px');
    }
}

function divMove3(e) {
    $('#einstellungen').height(startY - e.clientY + 'px');
}


/**
 * Kartengröße korrigieren, wenn Größe des Browserfensters verändert wird
 *
 */
function resize() {
    windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

    if (windowWidth <= 490) {
        $('#map').width('300px');
        stufe = 2;
        isMobile = true;
        $('#suche').height('30px');
        document.getElementById('suche').style.fontSize = '16px';

    } else if (windowWidth > 491 && windowWidth < 1000) {
        $('#map').width('490px');
        stufe = -1;
    } else if (windowWidth >= 1000 && windowWidth < 1240) {
        $('#map').width('650px');
        stufe = -1;
    } else if (windowWidth >= 1240 && windowWidth < 1400) {
        $('#map').width('820px');
        stufe = -1;
    } else if (windowWidth > 1400) {
        $('#map').width('919px');
        stufe = -1;
    }
    if (isMobile) {


    } else if (!isMobile) {
        $('#informationDesktop').width('auto');
        document.getElementById('informationDesktop').style.maxWidth = '240px';
        bib_contentWidth = 'auto';
        stufe = -1;
    }
    mapWidth = $('#map').width();
}

/*
 * legt die Kartengröße, in Abhängigkeit der Browserfenstergröße, fest
 *
 */
function calculateMapSize() {
    windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

    if (windowWidth <= 490) {
        $('#map').width('300px');
        isMobile = true;
    } else if (windowWidth > 491 && windowWidth < 950) {
        $('#map').width('490px');
    } else if (windowWidth > 950 && windowWidth < 1240) {
        $('#map').width('650px');
    } else if (windowWidth > 1240 && windowWidth < 1400) {
        $('#map').width('820');
    } else if (windowWidth > 1400) {
        $('#map').width('919px');
    }
    mapWidth = $('#map').width() + 'px';
    
}

/**
 * Klick auf das Dragicon in Mobileview hat gleich Funktion wie Touch und Slide
 */
function dragiconClicked() {
    if ($('#informationMobile').length) {
        if ($('#bib_content').outerHeight() >= 70) {
            $('#bib_content').height($('#bibtitel').outerHeight() + 7 + 'px');
            stufe = 1;
            mouseUp1();
        } else if ($('#bib_content').outerHeight() < 70) {
            $('#bib_content').height('210px');
            stufe = 2;
            mouseUp1();
        } else if ($('#einstellungen').length) {
            if ($('#einstellungen').outerHeight() > 70)
                $('#einstellungen').display = 'none';
        }
    }
}

/**
 * Zwischen Desktop -> click und Mobile -> touch unterscheiden
 */
function addTouchListener() {
    if ($('#informationDesktop').length) {
        $('#informationDesktop').bind('mousedown', mouseDown);
        $(window).bind('mouseup', mouseUpDesktop);
    }

    if ($('#informationMobile').length) {
        $('#informationMobile').bind('touchstart', mouseDown);
        $(window).bind('touchend', mouseUp1);
    }


    if ($('#einstellungen').length) {
        $('#einstellungen').bind('touchstart', mouseDown);
        $(window).bind('touchend', mouseUp2);
    }

}

/*
 * initializer-Methode
 *
 * @param {string} sigelUebergeben das Sigel das angezeigt werden soll, leerer String wenn alle Marker angezeigt werden
 * @param{string} indoorUebergeben - nicht mehr in Gebrauch -
 */
function init(sigelUebergeben, indoorUebergeben) {
    var onresize = function () {
        resize();
    }
    $(window).bind("resize", onresize);

    initIcons();

    if (!String.prototype.startsWith) {
        String.prototype.startsWith = function (str) {
            return !this.indexOf(str);
        }
    }

    // datalist befüllen für Suchvorschläge
    var options = '';
    for (var i = 0; i < institute.length; i++)
        $('#theDataList').append($('<option>', {text: institute[i].name}));
        
    semester = getSemester(); // haben wir grad Semester?
    feiertag = getFeiertag(); // haben wir grad Feiertag?

    $('#suche').val("");
    var options = '';
    gewaehlteZeit = dates('uhrzeit'); // Uhrzeit initial auf aktuelle Uhrzeit setzen

    var d = new Date();
    var dd = d.getDay() - 1;
    gewaehlterTag = dd; // Tag initial auf aktuellen Tag setzen

    /* Laden der OSM-Karte
     * alternativer Kartenstil in Farbe:
     * http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png
     * http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png
     * https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png
     */
    L.tileLayer('https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png', {
        maxZoom: 20,
        attribution: 'Map data &copy; OpenStreetMap contributors'
    }).addTo(map);


    if (sigelUebergeben.length === 0 && indoorUebergeben.length == 0) {
        calcMarkers('8', false);
    } else if (sigelUebergeben.length > 0 && indoorUebergeben.length == 0) {
        calcMarkers(sigelUebergeben, false);
    }
    //calcMarkers('8', false);
}

/**
 * Errechnet, welche Marker, mit welcher Farbe, auf der Karte angezeigt werden
 *
 * @param{number} fakultaet
 * @param{boolean} fromMobile
 */
function calcMarkers(fakultaet, fromMobile) {
    map.removeLayer(markers);
    if (fakultaet === 9)
        fakultaet = savedFakultaet;
    savedFakultaet = fakultaet;
    sigelname = [];

    
    if ($('#institutsChoice').length == 0) { // erster Aufruf, alles noch nicht initilaisiert
        if (savedFakultaet.length < 3) { // kein Sigel übergeben
            for (var i = 0; i < institute.length; i++) {
                ints.push(institute[i]);
                marks.push(koordinaten[i]);
                sigelname.push(institute[i].name);
            }
        } else { // Sigel wurde mitübergeben
            for (var i = 0; i < institute.length; i++) {
                if (institute[i].sigel === savedFakultaet) {
                    ints.push(institute[i]);
                    marks.push(koordinaten[i]);
                    sigelname.push(institute[i].name);
                }
            }
        }
    } else {
        // Sonderfall: fakultätsübergreifende/ungebundene Bibliotheken
        if ($('#institutsChoice').val() === 'DE-38-0') {
            for (var i = 0; i < institute.length; i++) {
                // USB
                if (institute[i].sigel === 'DE-38') {
                    ints.push(institute[i]);
                    marks.push(koordinaten[i]);
                    sigelname.push(institute[i].name);
                }
                // HWA
                if (institute[i].sigel === 'DE-38-HWA') {
                    ints.push(institute[i]);
                    marks.push(koordinaten[i]);
                    sigelname.push(institute[i].name);
                }
                // Bibliothek für Informatik und Wirtschaftsinformatik
                if (institute[i].sigel === 'DE-38-526') {
                    ints.push(institute[i]);
                    marks.push(koordinaten[i]);
                    sigelname.push(institute[i].name);
                }
            }
        }

        // Sonderfall: HumFak
        if ($('#institutsChoice').val() === 'DE-38-3') {
            for (var i = 0; i < institute.length; i++) {
                // HWA
                if (institute[i].sigel === 'DE-38-HWA') {
                    ints.push(institute[i]);
                    marks.push(koordinaten[i]);
                    sigelname.push(institute[i].name);
                }
            }
        }
        // Sonderfall: USB
        if (fakultaet === 'DE-38') {
            for (var i = 0; i < institute.length; i++) {
                if (institute[i].sigel === 'DE-38') {
                    ints.push(institute[i]);
                    marks.push(koordinaten[i]);
                    sigelname.push(institute[i].name);
                }
            }
        } else {
            if (fakultaet !== '8' && fakultaet.toString().match(new RegExp(/\d*/g))) {
                for (var i = 0; i < institute.length; i++) {
                    /* alle Bibliotheken */
                    if ($('#artSelect').val() === '0') {
                        if (institute[i].sigel.indexOf(fakultaet) == 0) {
                            ints.push(institute[i]);
                            marks.push(koordinaten[i]);
                            sigelname.push(institute[i].name);
                        }
                    }
                    /* nur Praesensbibliotheken */
                    else if ($('#artSelect').val() === '1') {
                        if (institute[i].sigel.indexOf(fakultaet) == 0) {
                            if (institute[i].art.indexOf('Pr') == 0) {
                                ints.push(institute[i]);
                                marks.push(koordinaten[i]);
                                sigelname.push(institute[i].name);
                            }
                        }
                        /* nur Ausleihbibliotheken */
                    } else if ($('#artSelect').val() === '2') {
                        if (institute[i].sigel.indexOf(fakultaet) == 0) {
                            if (institute[i].art.indexOf('Aus') == 0) {
                                ints.push(institute[i]);
                                marks.push(koordinaten[i]);
                                sigelname.push(institute[i].name);
                            }
                        }
                    }
                }
            } else {
                for (var i = 0; i < institute.length; i++) {
                    if ($('#artSelect').val() === '0') {
                        ints.push(institute[i]);
                        marks.push(koordinaten[i]);
                        sigelname.push(institute[i].name);
                    }
                    /* nur Präsensbibliotheken */
                    else if ($('#artSelect').val() === '1') {
                        if (institute[i].art.indexOf('Pr') == 0) {
                            ints.push(institute[i]);
                            marks.push(koordinaten[i]);
                            sigelname.push(institute[i].name);
                        }
                        /* nur Ausleihbibliotheken */
                    } else if ($('#artSelect').val() === '2') {
                        if (institute[i].art.indexOf('Aus') == 0) {
                            ints.push(institute[i]);
                            marks.push(koordinaten[i]);
                            sigelname.push(institute[i].name);
                        }
                    }
                }
            }
        }
    }

    drawMarkers(ints, marks);
    ints = [];
    marks = [];

}

/**
 * Zeichnet die Marker auf die Karte
 *
 * @param {Array} inst array mit den zu zeichnenden Instituten
 * @param {Array} coord array mit den zugehörigen Korrdinaten der Instituten
 */
function drawMarkers(inst, coord) {
    var sigel, name, marker;
    var array = [];
    //var bounds = new L.LatLngBounds();

    map.removeLayer(markers); // clear map from markers
    markers = new L.FeatureGroup();

    var latlng;
    for (var i = 0; i < inst.length; i++) {
        var sig = inst[i].sigel;
        if (sig == 'DE-38-103' || sig == 'DE-38-105' || sig == 'DE-38-113' || sig == 'DE-38-120' || sig == 'DE-38-121' || sig == 'DE-38-128' || sig == 'DE-38-146' || sig == 'DE-38-157' || sig == 'DE-38-159' || sig == 'DE-38-104' || sig == 'DE-38-166' ) {
            continue;
        }

        var zeiten, pinColor;
        if (inst[i].zeiten.length > 0) {
            zeiten = parse(inst[i].zeiten);

            if ($('#geoeffnet') != null) {
                if ($('#geoeffnet').is(':checked') && zeiten === 2)
                    continue;
            }
            if (zeiten == 1) {
                pinColor = greenIc;

            } else if (zeiten == 2) {
                pinColor = redIc;

            } else if (zeiten === 0) {
                pinColor = greyIc;

            } else if (zeiten == undefined) {
                pinColor = greyIc;
            }

            marker = L.marker([coord[i][1], coord[i][0]], {
                    icon: pinColor,
                    iconSize: 50,
                })
                .on('click', function (e) {
                    latlng = map.mouseEventToLatLng(e.originalEvent);
                    $('#einstellungen').hide();
                    $('#filterPanel').hide();
                    $('#bib_content').show();
                    $('#informationDesktop').show();
                    $('#bib_content').html(
                        showPopupText(e.target.name, false) +
                        "<div id='block'><h4>Öffnungszeiten</h4>" +
                        "<p>" + e.target.zeiten + "</p></div>");

                    // xxx immer zum Marker zoomen?
                    map.setView(latlng, zoomfaktor);
                    $('#bib_content').width(bib_contentWidth);
                    $('#bib_content').height('210px');

                    if (stufe == -1) {
                        $('#bib_content').height('auto');
                        $('#block').height('auto');
                    }
                    if (!isMobile) {
                        if (document.getElementById('filterPanel').style.display == 'block') {
                            $('#filterPanel').hide();
                            $('#block').heiht('auto');
                            $('#informationDesktop').show()
                            $('#bib_content').height('auto');

                        }
                    }
                    tempName = e.target.name;
                    tempZeiten = e.target.zeiten;

                }).addTo(markers);

            marker.sig = inst[i].sigel;
            marker.name = inst[i].name;
            marker.zeiten = inst[i].zeiten;
            var instname = inst[i].name;
            var arbeitsplaetze = inst[i].arbeitsplaetze;            
            
            if (arbeitsplaetze != ''){
               instname = instname + '<br/>Nutzerarbeitsplätze: ' + arbeitsplaetze;
            }

            marker.bindTooltip("<div>" + instname + "</div>", {
                permanent: showMarkerText,
                direction: 'right',

            });
            oms.addMarker(marker);
        }
    }
    // einzelnen Marker ins Zentrum schieben
    if (inst.length == 1) {
        $('#bib_content').html(showPopupText(inst[0].name, false) + "<div id='block'><h4>Öffnungszeiten</h4><p>" + inst[0].zeiten + "</p></div>");

        $('#bib_content').width(bib_contentWidth);
        $('#bib_content').show();
        $('#block').height('auto');

        $('#bib_content').width(bib_contentWidth);

        $('#bib_content').height('210px');

        map.setView([coord[0][1], coord[0][0]], 14);
        tempName = inst[0].name;
        tempZeiten = inst[0].zeiten;
    }
    // mehrere Marker ins Zentrum schieben
    else if (inst.length >= 2 && inst.length < 10) {
        var several = [];
        for (var g = 0; g < coord.length; g++) {
            var m = new L.LatLng(coord[g][1], coord[g][0]);
            several.push(m);
        }
        var bounds = new L.LatLngBounds(several);
        map.fitBounds(bounds, {
            padding: [50, 50]
        });
    }
    map.addLayer(markers);
}

// xxx: können die beiden methoden zusammengefasst werden?
// xxx: hier könnt noch was mit animation gemacht werden
function showFilterPanel() {
    var filterPanel = $('#filterPanel');
    if (!$(filterPanel).is(':visible')) {
        showEinstellungen();
        
        $('#bib_content').height('0px');
        $('#informationDesktop').hide();
        $(filterPanel).show();
    } else if ($(filterPanel).is(':visible')) {
        $(filterPanel).hide();
        try {
            $('#bib_content').height($('#bibtitel').outerHeight() + 7 + 'px');
        } catch (error) {
            console.log(error);
        }
        if (!isMobile) {
            $('#informationDesktop').show();
            $('#bib_content').height('auto');
        }
        fireMarker();
    }
}


/**
 * Öffnet Einstellungsmenu
 */
function showEinstellungen() {
    if (isLoaded) {
        if ($('#einstellungen').length) {
            $('#einstellungen').hide();
        } else {
            $('#einstellungen').show()
            $('#einstellungen').height('auto');
        }
    }
    // mus beim ersten öffnen initialisiert werden
    if (!isLoaded) {
        loadEinstellungen();
        $('#einstellungen').show();
        $('#einstellungen').height('auto');
        initTageSelect();
        initFields();
        initSlider();

        isLoaded = true;
    }
    $('#einstellungen').show();
}

/*
 * HTML-code für Einstellungen
 */
function loadEinstellungen() {
    $('#einstellungen').html('<span id="einstellungen"><div class="shadowbox"><div id="flexSelect"><select id="institutsChoice"></select></div><br><div id="flexSelect1"><select id="artSelect"></select></div></div><div class="shadowbox"><label><input type="checkbox" id="geoeffnet">Nur geöffnete Bibliotheken anzeigen</label><br><label><input type="checkbox" id="showMarkerText">Namen anzeigen</label></div><div class="shadowbox"><h4 style="text-align: center">Bibliotheksbesuch planen</h4><img src="https://www.ub.uni-koeln.de/e12502/e12523/e33478/e35646/cal_ger.png"/><select id="tageChoice"></select><span id="textZeitWahl" style="padding: 7px"></span><br><img src="https://www.ub.uni-koeln.de/e12502/e12523/e33478/e35645/clock_ger.png"/><input type="range" class="slider" min="360" max="1439" step="15" id="rangevalue"></div><hr><br><button type="button" id="btnZuruecksetzen">Alles Zurücksetzen</button><br></span>');
}

function showInfo() {
    $('#einstellungen').hide();
    if (!w$('#bib_content').length) {
        $('#bib_content').show();
    } else {
        $('#bib_content').hide();
    }
}

/**
 * Bestimmt ob das aktuelle Datum innerhalb oder ausserhalb der Semesterzeit liegt
 *
 * @return	true (wenn innerhalb des Semesters), false (wenn in der Semesterfreien Zeit)
 */
function getSemester() {
    var aktDatum = dates('semester');
    var returnVal = false;
    for (var semesterIt = 0; semesterIt < semesterZeit.length; semesterIt++) {
        if (aktDatum > semesterZeit[semesterIt].von && aktDatum < semesterZeit[semesterIt].bis)
            return true;
    }

    return returnVal;
}

function changeDay(day) {
    if (parseInt(day) === 9) {
        var d = new Date();
        var dd = d.getDay() - 1;
        gewaehlterTag = dd;

    } else
        gewaehlterTag = parseInt(day);
    calcMarkers(9, false);
}

/**
 * Monat zu number
 * 
 */
function getMonat(input) {
    var monatsArray = ["Januar", "Februar", "März", "April", "Mai", "Juni",
        "Juli", "August", "September", "Oktober", "November", "Dezember"
    ];
    return monatsArray.indexOf(input) + 1;
}


function initSlider() {
    var slider = $('#rangevalue');
    var textZeitwahl = $('#textZeitWahl');
    if (browser !== 'IE') {
        $(slider).bind("input", function () {
            var minutes = addZero(parseInt(this.value % 60, 10));
            var hours = parseInt(this.value / 60 % 24, 10);
            gewaehlteZeit = hours + "" + minutes;
            $(textZeitwahl).html(hours + ":" + minutes + " Uhr");
            calcMarkers(9, false);
        });
    } else if (browser === 'IE') {
        $(slider).bind("change", function () {
            var minutes = addZero(parseInt(this.value % 60, 10));
            var hours = parseInt(this.value / 60 % 24, 10);
            gewaehlteZeit = hours + "" + minutes;
            $(textZeitwahl).html(hours + ":" + minutes + " Uhr");
            calcMarkers(9, false);
        });
    }
    var d = new Date();
    gewaehlteZeit = d.getHours() + "" + addZero(d.getMinutes());
    $(slider).val(dates('stunde') * 60);
}



if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
        'use strict';
        if (typeof start !== 'number') {
            start = 0;
        }

        if (start + search.length > this.length) {
            return false;
        } else {
            return this.indexOf(search, start) !== -1;
        }
    };
}

if (!('contains' in String.prototype)) {
    String.prototype.contains = function (str, startIndex) {
        "use strict";
        return -1 !== String.prototype.indexOf().call(this.str, startIndex);
    };
}

Array.prototype.byCount = function () {
    var itm, a = [],
        L = this.length,
        o = {};
    for (var i = 0; i < L; i++) {
        itm = this[i];
        if (!itm) continue;
        if (o[itm] == undefined) o[itm] = 1;
        else ++o[itm];
    }
    for (var p in o) a[a.length] = p;
    return a.sort(function (a, b) {
        return o[b] - o[a];
    });
}

function sortByFrequency(array) {
    var frequency = {};

    array.forEach(function (value) {
        frequency[value] = 0;
    });

    var uniques = array.filter(function (value) {
        return ++frequency[value] == 1;
    });

    return uniques.sort(function (a, b) {
        return frequency[b] - frequency[a];
    });
}

/**
 * Welcher Browser wird benutzt
 * Wichtig erstmal nur bei Internet Explorer
 */
function detectBrowser() {
    brws = '';
    if ((navigator.userAgent.indexOf("Opera") || navigator.userAgent.indexOf('OPR')) != -1) brws = 'Opera';
    else if (navigator.userAgent.indexOf("Chrome") != -1) brws = 'Chrome';
    else if (navigator.userAgent.indexOf("Safari") != -1) brws = 'Safari';
    else if (navigator.userAgent.indexOf("Firefox") != -1) brws = 'Firefox';
    else if ((navigator.userAgent.indexOf("MSIE") != -1) || (!!document.documentMode == true)) brws = 'IE'; //IF IE > 10
    else brws = 'unknown';

    return brws;
}


/** 
 * parst die angegebenen Zeiten aus dem KUG
 * Returnwerte:
 * 	0 -> Keine Informationen	
 *	1 -> geöffnet
 *	2 -> geschlossen
 */
function parse(str) {
    // Eintrag enthält getrennte Angaben zu Semester und Semesterfreien Zeiten
    if (str.search("Im Semester:") !== -1) {
        if (semester === true) {
            var n = str.replace("Im Semester:", "");
            if (n.indexOf("In den Semesterferien:") != -1) {
                var indexSemesterferien = n.indexOf("In den Semesterferien:");
                var sub1 = n.substring(0, indexSemesterferien);
                var f = [];
                if (sub1.indexOf(";") != -1) {
                    f = sub1.split(";");
                    for (var y = 0; y < f.length; y++) {
                        var temp = f[y].toString().replace(new RegExp(/<[.*][^>]*>/g), " "); // löscht Tags nicht
                        f[y] = temp;
                    }
                } else
                    f[0] = sub1;

            }
            // Bib enthält zwar Eintrag für "Im Semester" aber nicht für "in den Semesterferien", also Pin ausgrauen
            else
                return 0;
        } else if (semester === false) {
            if (str.indexOf("In den Semesterferien:") != -1) {
                var indexSemesterferien = str.indexOf("In den Semesterferien:");
                var sub1 = str.substring(indexSemesterferien, str.length);
                var f = [];
                if (sub1.indexOf(";") != -1) {
                    f = sub1.split(";");
                    for (var y = 0; y < f.length; y++) {
                        var temp = f[y].toString().replace(new RegExp(/<[.*][^>]*>/g), " "); // löscht Tags nicht
                        f[y] = temp;
                    }
                } else
                    f[0] = sub1;
            }
            // Bib enthält zwar Eintrag für "Im Semester" aber nicht für "in den Semesterferien", also Pin grauen
            else {
                return 0;
            }
        }
    }

    //***************************************************************************************************************************
    // Eintrag enthält keine Angaben zu Semesterzeiten
    else if (str.search("Im Semester:") === -1) {
        var sub1 = str;
        var f = [];
        if (sub1.indexOf(";") != -1) {
            f = sub1.split(";");
            for (var y = 0; y < f.length; y++) {
                var temp = f[y].toString().replace(new RegExp(/<[.*][^>]*>/g), " "); // löscht Tags nicht
                f[y] = temp;
            }
        } else
            f[0] = sub1;

    }

    // eigentliche Berechnung
    var eintrag;
    var tage = [];
    for (var i = 0; i < f.length; i++) {
        eintrag = f[i];

        // Mo - Fr:
        if (eintrag.match(new RegExp(/([A-Za-z]{2}[\s]?-[\s]?[A-Za-z]{2}:[\s]?)/g))) {
            tage = tagBisTag(eintrag);
        }

        // Mo, Di, ...
        else if (eintrag.match(new RegExp(/[A-Za-z]{2}(\,|: )/g))) {
            tage = tagUndTag(eintrag);
        }
        // gar kein Eintrag
        else
            return 0;

        if (tage[0] == -1 && tage.length == 1)
            return 0;

        var index = -1;
        if (tage.length > 2) {
            for (var it = 0; it < tage.length; it++)
                if (tage[it] == -1)
                    index = it;
            if (index > -1)
                tage.splice(index, 1);
        }
        // checken ob akt Tag drinnen ist
        if (checkTag('tt', tage) === true)
            return istOffen(eintrag);
        else if (checkTag('tt', tage) === false) {
            if (i < f.length - 1)
                continue;
            else
                return 2;
        }
    }
}

// Mo - Fr:
function tagBisTag(eintrag) {
    var t = eintrag.match(new RegExp(/([A-Za-z]{2}[\s]?-[\s]?[A-Za-z]{2}:[\s]?)/g));
    var tage = t[0].split("-");

    for (var tti = 0; tti < tage.length; tti++) {
        var temp = tage[tti].toString().replace(/[^A-Za-z]/g, "");
        tage[tti] = tageZuNummer(temp.trim());

    }
    // auffuellen
    var start = tage[0];
    var end = tage[tage.length - 1];

    if (end - start > 1) {
        for (start + 1; start < end; start++) {
            tage.push(start);
        }
    }
    return tage;
}


// Mo, Di,
function tagUndTag(eintrag) {
    var t = eintrag.match(new RegExp(/[A-Za-z]{2}(\,|: )/g));

    for (var ti = 0; ti < t.length; ti++) {
        var temp = t[ti].toString().replace(/[^A-Za-z]/g, "").trim();
        t[ti] = tageZuNummer(temp);
    }
    tage = t;
    return tage;
}

/**
 * wandelt Tage zu Nummern um mit denen gerechnet werden kann
 *
 * @param tag	Tag als String
 * @return korrespondierende Nummer (0 - Montag, 1 - Dienstag, ...)
 */
function tageZuNummer(tag) {
    var t = tag.trim();
    var arrayKurz = ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'];
    var arrayLang = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'];

    if (t.length == 2) {
        return arrayKurz.indexOf(t);
    } else if (t.length > 2) {
        return arrayLang.indexOf(t);
    }
}


/** 
 * Suchtextfeld clearen und alle Marker anzeigen
 */
function clearSearch() {
    $('#suche').val("");
    calcMarkers('8', false);
}

function istOffen(sub1) {
    // 9.00 - 18.45 Uhr
    if (sub1.match(new RegExp(/(\d{1,2}\.\d{2}[\s]?-[\s]?\d{1,2}\.\d{2}[\s]?)/g))) {
        var z = sub1.match(new RegExp(/(\d{1,2}\.\d{2}[\s]?-[\s]?\d{1,2}\.\d{2}[\s]?)/g));

        for (t1 = 0; t1 < z.length; t1++) {
            var zeit = z[t1].split("-");
            for (v in zeit) {
                var temp = zeit[v].toString().replace(/[^\d]/g, "");
                zeit[v] = temp;
            }
            if (checkZeit(zeit[0], zeit[1]) === true)
                return 1;
            else if (checkZeit(zeit[0], zeit[1]) === false) {
                if (t1 < z.length - 1)
                    continue;
                else
                    return 2;
            }
        }
    }
    if (sub1.indexOf('geschlossen') != -1)
        return 2;
    else
        return 0;
}

/**
 * check ob aktuelle/gewählte Zeit innerhalb der übergebenen Zeit liegt
 * 
 * @param{number} beg anfangszeit
 * @param{number} end endzeit
 * @return{boolean} true - ja/ false - nein
 */
function checkZeit(beg, end) {
    aktTime = gewaehlteZeit;
    if (parseInt(aktTime) >= parseInt(beg) && parseInt(aktTime) <= parseInt(end))
        return true;
    else
        return false;
}

/**
 * prüft ob aktueller Tag innerhalb der Öffnungszeitentage der Bibliothek liegen
 *
 * @param tagDelete ist obsolet, kann weg
 * @param tagArray die Tage an denen die Bibliothek geöffnet ist als Nummern
 *
 * @return true (wenn geöffnet), false (wenn geschlossen)
 */
function checkTag(tagDELETE, tagArray) {
    if (tagArray == undefined)
        return false;
    var tag = dates('tag');

    for (var t = 0; t < tagArray.length; t++) {
        if (tagArray[t] == tag)
            return true;
    }
    return false;
}

function calcMarkersByName(input) {
    // USB Köln - Sonderfall abfangen
    if (input === 'USB Köln') {
        for (var i = 0; i < institute.length; i++) {
            if (institute[i].sigel.indexOf('DE-38') != -1 && input.length === 4) {
                ints.push(institute[i]);
                marks.push(koordinaten[i]);
                sigelname.push(institute[i].name);
            }
        }
    }
    // HWA - Sonderfall abfangen
    else if (input === 'USB Köln / Humanwissenschaftliche Abteilung') {
        for (var i = 0; i < institute.length; i++) {
            if (institute[i].sigel.indexOf('DE-38-HWA') != -1 && input.length === 4) {
                ints.push(institute[i]);
                marks.push(koordinaten[i]);
                sigelname.push(institute[i].name);
            }
        }
    } else {
        for (var t = 0; t < input.length; t++) {
            for (var i = 0; i < institute.length; i++) {
                if (institute[i].sigel === input[t]) {
                    ints.push(institute[i]);
                    marks.push(koordinaten[i]);
                }
            }
        }
    }

    if (ints.length !== 0) {
        savedFakultaet = ints[0].sigel;

        foundInsts = [];
        if (typeof vectorSource !== 'undefined')
            map.removeLayer(vectorLayer);

        drawMarkers(ints, marks);
    }
    ints = [];
    marks = [];
}



function search_includes(inp, bool) {
    var text = "";
    var foundInsts = [];
    var split = [];
    var result = [];
    var newDataList = [];

    inp = inp.value;

    if ($('#geoeffnet').length)
        $('#geoeffnet').prop('checked', false);

    // Sucheingabe bei Leerzeichen splitten
    if (inp.indexOf(" ") != -1)
        split = inp.split(" ");
    else
        split[0] = inp;

    // Leerzeichen am ende der Eingabe löschen
    if (inp.charAt(inp.length - 1) === " ")
        return;

    // 'und' und 'für' aus Suche herausfiltern
    var split1 = [];
    for (var i = 0; i < split.length; i++) {
        if (split[i].toLowerCase() !== 'und' && split[i].toLowerCase() !== 'für' && split[i].toLowerCase() !== 'seminar')
            split1.push(split[i]);
    }
    console.log(split1);


    if (split1.length == 1) {
        for (var i = 0; i < institute.length; i++) {
            if (institute[i].name.toLowerCase().includes(split1[0].toLowerCase()) || institute[i].sigel.indexOf(inp) == 0)
                foundInsts.push(institute[i].sigel);
        }
    } else if (split1.length == 2) {
        for (var i = 0; i < institute.length; i++) {
            if (institute[i].name.toLowerCase().includes(split1[0].toLowerCase()) &&
                institute[i].name.toLowerCase().includes(split1[1].toLowerCase()))
                foundInsts.push(institute[i].sigel);
        }
    } else if (split1.length == 3) {
        for (var i = 0; i < institute.length; i++) {
            if (institute[i].name.toLowerCase().includes(split1[0].toLowerCase()) &&
                institute[i].name.toLowerCase().includes(split1[1].toLowerCase()) &&
                institute[i].name.toLowerCase().includes(split1[2].toLowerCase()))
                foundInsts.push(institute[i].sigel);
        }
    } else if (split1.length == 4) {
        for (var i = 0; i < institute.length; i++) {
            if (institute[i].name.toLowerCase().includes(split1[0].toLowerCase()) &&
                institute[i].name.toLowerCase().includes(split1[1].toLowerCase()) &&
                institute[i].name.toLowerCase().includes(split1[2].toLowerCase()) &&
                institute[i].name.toLowerCase().includes(split1[3].toLowerCase()))
                foundInsts.push(institute[i].sigel);
        }
    }

    for (var i = 0; i < foundInsts.length; i++) {
        for (var t = 0; t < institute.length; t++) {
            if (institute[t].sigel == foundInsts[i])
                result.push(institute[t].sigel);
        }
    }

    //if(result.length == 0 || result.length > 10)
    var neudazu = abkuerzungen(inp);


    if (neudazu.length >= 5) {
        for (var i = 0; i < 5; i++) {
            var add = true;
            for (var v = 0; v < result.length; v++) {
                if (result[v] === neudazu[i])
                    add = false;
            }
            if (add) {
                for (var t = 0; t < institute.length; t++) {

                    if (neudazu[i] === institute[t].sigel)
                        result.push(institute[t].sigel);
                }
            }
        }
    } else {
        for (var i = 0; i < neudazu.length; i++) {
            var add = true;
            for (var v = 0; v < result.length; v++) {
                if (result[v] === neudazu[i])
                    add = false;
            }
            if (add) {
                for (var t = 0; t < institute.length; t++) {
                    if (neudazu[i] === institute[t].sigel)
                        result.push(institute[t].sigel);
                }
            }
        }
    }
    // eindeutigen Treffer gefunden -> zB nach Auswahl aus Dropdown
    for (var i = 0; i < institute.length; i++) {
        if (institute[i].name.toLowerCase() === inp.toLowerCase()) {
            result = [];
            result.push(institute[i].sigel);
        }
    }
    calcMarkersByName(result);
}

function clearSearch() {
    $('#suche').val("");
    calcMarkers('8', false);
}

function resetInst() {
    $('#institutsChoice').val('8').change();
    calcMarkers($('#institutsChoice').val(), false);
}

function resetArt() {
    $('#artSelect').val('0').change;
    calcMarkers(9, false);
}

function fireMarker() {
    $('#bib_content').html(showPopupText(tempName, false) + "<div id='block'><h4>Öffnungszeiten</h4>" +
        "<p>" + tempZeiten + "</p></div>");

}

/* wenn Stunden oder Minuten nur eine Ziffer haben, eine 0 vorne dran hängen */
function addZero(i) {
    if (i < 10)
        i = "0" + i;
    return i;
}

function dates(input) {
    var date = new Date();
    switch (input) {
        /* Wochentag */
        case 'tag':
            // return date.getDay() -1;
            return gewaehlterTag;

            /* Uhrzeit ohne doppelpunkt*/
        case 'uhrzeit':
            return date.getHours() + "" + addZero(date.getMinutes());

        case 'stunde':
            return date.getHours();

            /* volles Datum ohne Punkte */
        case 'volles_datum':
            return date.getDate() + "" + (addZero(date.getMonth() + 1)) + "" + date.getFullYear();

            /* Tag und Monat (mit Punkt fuer Feiertag) */
        case 'tag_monat':
            return addZero(date.getDate()) + "." + (date.getMonth() + 1);

        case 'monat':
            return date.getMonth() + 1;

        case 'voller_tag':
            // return '01.01';
            return addZero(date.getDate()) + "." + (date.getMonth() + 1);

        case 'semester':
            // Semesterferien simulieren
            //return '20180203';
            return date.getFullYear() + "" + (addZero(date.getMonth() + 1)) + "" + addZero(date.getDate());
    }
}

/**
 * Bestimmt ob aktuelles Datum Feiertag ist oder nicht
 *
 * @return true (wenn Feiertag), false (wenn normaler Tag)
 */
function getFeiertag() {
    $tagFull = dates('voller_tag');
    if (feiertage.indexOf($tagFull) == -1)
        return false;
    else
        return true;


}


// bei Texteingabe im Suchschlitz werden Abkürzungen durchsucht und Ergebnisse den Vorschlägen hinzugefügt
function abkuerzungen(inp) {
    var foundInsts = [];
    var arrSize = 1;
    var end = [];

    var wordsToIterate = [];
    if (inp.indexOf(' ') >= 0) {
        wordsToIterate = inp.split(' ');
        arrSize = wordsToIterate.length;
    } else {
        wordsToIterate[0] = inp;
    }

    //input = inp;
    arr = [];
    for (var it = 0; it < wordsToIterate.length; it++) {
        input = wordsToIterate[it].toLowerCase();

        /* Allgemeine Abkürzungen */
        if ('vwl'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('hwa'.indexOf(input) != -1) arr.push('DE-38-HWA');
        if ('edz'.indexOf(input) != -1) arr.push('DE-38-EDZ');
        if ('fmt'.indexOf(input) != -1) arr.push('FMT');
        if ('unibib'.indexOf(input) != -1) arr.push('DE-38');

        /* Abkürzung aller zu 101 gezählten Bibs */
        if ('volkswirtschaftliche bibliothek 2 (ehem.: seminar für finanzwissenschaft)'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('finanzwissenschaftliches forschungsinstitut'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('volkswirtschaftliche bibliothek 1 (ehem.: staatswissenschaftliches (volkswirtschaftliches) seminar)'.indexOf(input) != -1) arr.push('DE-38-101');

        if ('finanzwissenschaft volkswirtschaftliche'.indexOf(input) != -1 || 'DE-38-103'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('rundfunkökonomie'.indexOf(input) != -1 || 'DE-38-113'.indexOf(input) != -1) arr.push('DE-38-101');


        /* Liste von Schlagworten basierend auf den Angaben der Bibliotheken */
        /* A */
        if ('abenteuerliteratur'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('abwl'.indexOf(input) != -1) arr.push('DE-38-108', 'DE-38-112', 'DE-38-118', 'DE-38-124', 'DE-38-156');
        if ('afrikanistik'.indexOf(input) != -1) arr.push('DE-38-998', 'DE-38-999');
        if ('altägypten ägyptologie'.indexOf(input) != -1) arr.push('DE-38-416');
        if ('alte geschichte'.indexOf(input) != -1) arr.push('DE-38-404');
        if ('altertumskunde'.indexOf(input) != -1) arr.push('DE-38-404', 'DE-38-460', 'DE-38-461', 'DE-38-462');
        if ('amerikanische literatur'.indexOf(input) != -1) arr.push('DE-38-411');
        if ('amerikanisches recht'.indexOf(input) != -1) arr.push('DE-38-235');
        if ('anglistik'.indexOf(input) != -1) arr.push('DE-38-411');
        if ('anglo amerikanische geschichte'.indexOf(input) != -1) arr.push('DE-38-422');
        if ('anthropologie afrikanische'.indexOf(input) != -1) arr.push('DE-38-419');
        if ('anwaltsrecht und notarrecht'.indexOf(input) != -1) arr.push('DE-38-233');
        if ('arabistik'.indexOf(input) != -1) arr.push('DE-38-414');
        if ('arbeitskreis nationalismusforschung'.indexOf(input) != -1) arr.push('DE-38-420');
        if ('arbeitsmarktpolitik'.indexOf(input) != -1) arr.push('DE-38-107');
        if ('arbeitsrecht'.indexOf(input) != -1) arr.push('DE-38-203', 'DE-38-204');
        if ('archäologie'.indexOf(input) != -1) arr.push('DE-38-426', 'DE-38-427', 'DE-38-438');
        if ('architekturgeschichte'.indexOf(input) != -1) arr.push('DE-38-445');
        if ('aristoteles'.indexOf(input) != -1) arr.push('DE-38-432');
        if ('asien'.indexOf(input) != -1) arr.push('DE-38-450', 'DE-38-459');
        if ('atomrecht'.indexOf(input) != -1) arr.push('DE-38-220');
        if ('augustinus'.indexOf(input) != -1) arr.push('DE-38-432');
        if ('ausländisches öffentliches recht'.indexOf(input) != -1) arr.push('DE-38-207');
        if ('ausländisches privatrecht'.indexOf(input) != -1) arr.push('DE-38-208');
        if ('außenwirtschaft'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('australische literatur'.indexOf(input) != -1) arr.push('DE-38-411');
        if ('averroes'.indexOf(input) != -1) arr.push('DE-38-432');

        /* B */
        if ('bankbetriebslehre'.indexOf(input) != -1) arr.push('DE-38-109');
        if ('bankrecht'.indexOf(input) != -1) arr.push('DE-38-217');
        if ('bankseminar'.indexOf(input) != -1) arr.push('DE-38-109');
        if ('behindertenpädagogik'.indexOf(input) != -1) arr.push('DE-38-302');
        if ('berufspädagogik'.indexOf(input) != -1) arr.push('DE-38-134');
        if ('besteuerung steuerwettbewerb international'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('betriebswirtschaft'.indexOf(input) != -1) arr.push('DE-38-118', 'DE-38-124', 'DE-38-156');
        if ('bilanzrecht'.indexOf(input) != -1) arr.push('DE-38-231');
        if ('bildungsforschung sozialwissenschaften'.indexOf(input) != -1) arr.push('DE-38-309', 'DE-38-310');
        if ('bildungspolitik'.indexOf(input) != -1) arr.push('DE-38-107');
        if ('bildungswissenschaften'.indexOf(input) != -1) arr.push('DE-38-327');
        if ('biochemie'.indexOf(input) != -1) arr.push('DE-38-503', 'DE-38-507');
        if ('bioinformatik'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('biologie'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('biozentrum'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('botanik'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('bruch max'.indexOf(input) != -1) arr.push('DE-38-430');
        if ('bürgerliches recht'.indexOf(input) != -1) arr.push('DE-38-230', 'DE-38-231', 'DE-38-232', 'DE-38-234');
        if ('byzantinistik'.indexOf(input) != -1) arr.push('DE-38-460');

        /* C */
        if ('transnational'.indexOf(input) != -1) arr.push('DE-38-217'); // Center for Transnational Law (CENTRAL)
        if ('chemie'.indexOf(input) != -1) arr.push('DE-38-507');
        if ('physikalische chemie'.indexOf(input) != -1) arr.push('DE-38-509');
        if ('didaktik chemie'.indexOf(input) != -1) arr.push('DE-38-317');
        if ('china'.indexOf(input) != -1) arr.push('DE-38-450');
        if ('collegium musicum'.indexOf(input) != -1) arr.push('DE-38-430');
        if ('computer'.indexOf(input) != -1) arr.push('DE-38-006');
        if ('computerrecht'.indexOf(input) != -1) arr.push('DE-38-222');
        if ('controlling'.indexOf(input) != -1) arr.push('DE-38-160');

        /* D */
        if ('datenverarbeitung'.indexOf(input) != -1) arr.push('DE-38-006');
        if ('datenschutz'.indexOf(input) != -1) arr.push('DE-38-222');
        if ('ddr'.indexOf(input) != -1) arr.push('DE-38-219'); // DDR-Recht	
        if ('denkmalpflege'.indexOf(input) != -1) arr.push('DE-38-445');
        if ('deutsche sprache literatur'.indexOf(input) != -1) arr.push('DE-38-312', 'DE-38-405');
        if ('digitale medien'.indexOf(input) != -1) arr.push('DE-38-222');
        if ('distributionsforschung'.indexOf(input) != -1) arr.push('DE-38-158');
        if ('dokumentationszentrum europäisches anwalts und notarrecht'.indexOf(input) != -1) arr.push('DE-38-233');
        if ('drika'.indexOf(input) != -1) arr.push('DE-38-438');
        if ('drosophila'.indexOf(input) != -1) arr.push('DE-38-503');

        /* E */
        if ('commerce ecommerce e-commerce'.indexOf(input) != -1) arr.push('DE-38-159'); // E-Commerce
        if ('empirischesozialforschung'.indexOf(input) != -1) arr.push('DE-38-132', 'DE_38-141', 'DE-38-171');
        if ('energierecht'.indexOf(input) != -1) arr.push('DE-38-220');
        if ('energiewirtschaft'.indexOf(input) != -1) arr.push('DE-38-119', 'DE-38-220');
        if ('englische literatur'.indexOf(input) != -1) arr.push('DE-38-411');
        if ('englische sprache'.indexOf(input) != -1) arr.push('DE-38-313', 'DE-38-411');
        if ('entwicklungsbiologie entwicklungsgenetik'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('entwicklungspsychologie'.indexOf(input) != -1) arr.push('DE-38-305');
        if ('epigraphik'.indexOf(input) != -1) arr.push('DE-38-404');
        if ('erziehungswissenschaft'.indexOf(input) != -1) arr.push('DE-38-HWA');
        if ('ethnologie'.indexOf(input) != -1) arr.push('DE-38-431');
        if ('europäische fragen'.indexOf(input) != -1) arr.push('DE-38-125', 'DE-38-EDZ');
        if ('europäische musikethnologie'.indexOf(input) != -1) arr.push('DE-38-324');
        if ('europäische rechtslinguistik'.indexOf(input) != -1) arr.push('DE-38-468');
        if ('europäische union'.indexOf(input) != -1) arr.push('DE-38-215', 'DE-38-EDZ');
        if ('europäisches anwalts und notarrecht'.indexOf(input) != -1) arr.push('DE-38-233');
        if ('europäisches arbeits und sozialrecht'.indexOf(input) != -1) arr.push('DE-38-203');
        if ('europäisches dokumentationszentrum'.indexOf(input) != -1) arr.push('DE-38-EDZ');
        if ('europäisches medienrecht'.indexOf(input) != -1) arr.push('DE-38-222', 'DE-38-EDZ');
        if ('europäisches rundfunkrecht'.indexOf(input) != -1) arr.push('DE-38-222', 'DE-38-EDZ');
        if ('europäisches telekommunikationsrecht'.indexOf(input) != -1) arr.push('DE-38-222', 'DE-38-EDZ');
        if ('europäisches wettbewerbsrecht'.indexOf(input) != -1) arr.push('DE-38-222', 'DE-38-EDZ');
        if ('europarecht'.indexOf(input) != -1) arr.push('DE-38-212', 'DE-38-213', 'DE-38-215', 'DE-38-468', 'DE-38-EDZ');
        if ('evangelische theologie'.indexOf(input) != -1) arr.push('DE-38-111', 'DE-38-623');
        if ('evolutionsgenetik'.indexOf(input) != -1) arr.push('DE-38-503');

        /* F */
        // Fachbibliothek Rechtswissenschaft / Rechtswissenschaftliches Seminar 38/201
        if ('fachsprachen'.indexOf(input) != -1) arr.push('DE-38-468');
        if ('feminismus'.indexOf(input) != -1) arr.push('DE-38-007');
        if ('fennistik'.indexOf(input) != -1) arr.push('DE-38-444');
        if ('fernsehen'.indexOf(input) != -1) arr.push('DE-38-101'); // ??? Fernsehen in der vwl?
        if ('fernsehwissenschaft'.indexOf(input) != -1) arr.push('DE-38-448');
        if ('festschriften'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('film'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('filmwissenschaft'.indexOf(input) != -1) arr.push('DE-38-448');
        if ('finanzausgleich'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('finanzierungslehre'.indexOf(input) != -1) arr.push('DE-38-164');
        if ('finanzpolitik'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('finanzwissenschaft'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('finnische sprachwissenschaft und literatur'.indexOf(input) != -1) arr.push('DE-38-444');
        if ('finnland'.indexOf(input) != -1) arr.push('DE-38-444');
        if ('firmenmitteilungen'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('flexible fertigung'.indexOf(input) != -1) arr.push('DE-38-110');
        if ('föderalismus'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('forschungsstelle für das recht des gesundheitswesens'.indexOf(input) != -1) arr.push('DE-38-225');
        if ('frauenfilme'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('frauenliteratur'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('frieden und sicherheit'.indexOf(input) != -1) arr.push('DE-38-237');
        if ('frühe neuzeit'.indexOf(input) != -1) arr.push('DE-38-425');
        if ('frühgeschichte'.indexOf(input) != -1) arr.push('DE-38-426');

        /* G */
        if ('geldtheorie und geldpolitik'.indexOf(input) != -1) arr.push('DE-38-101');
        // Gemeinsame Fachbibliothek Archäologien 38/427
        // Gemeinsame Fachbibliothek Asien 38/450, 38/459
        // Gemeinsame Fachbibliothek Biowissenschaften 38/503
        // Gemeinsame Fachbibliothek Chemie 38/507
        // Gemeinsame Fachbibliothek Medienkultur und Theater 38/429, 38/448
        // Gemeinsame Fachbibliothek Rechtswissenschaft 38/201
        // Gemeinsame Fachbibliothek Slavistik 38/418
        // Gemeinsame Fachbibliothek Soziologie 38/132
        // Gemeinsame Fachbibliothek Versicherungswissenschaft 38/123
        // Gemeinsame Fachbibliothek Volkswirtschaftslehre 38/101
        if ('gender'.indexOf(input) != -1) arr.push('DE-38-007'); // Gender Studies in Köln
        if ('genetik'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('genossenschaften'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('geobibliothek'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('geochemie'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('geographie'.indexOf(input) != -1) arr.push('DE-38-314', 'DE-38-517');
        if ('geologie'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('geophysik'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('germanistik'.indexOf(input) != -1) arr.push('DE-38-405');
        if ('geschäftsberichte'.indexOf(input) != -1) arr.push('DE-38-102');
        if ('geschichte'.indexOf(input) != -1) arr.push('DE-38-306', 'DE-38-420');
        // Geschichte (amerikanische, anglo-amerikanische, britische, englische) 38/422
        if ('geschichte außereuropäische'.indexOf(input) != -1) arr.push('DE-38-423'); // Geschichte (außereuropäische) 38/423
        if ('geschichte osteuropäische osteuropa'.indexOf(input) != -1) arr.push('DE-38-425'); // Geschichte (osteuropäische) 38/425
        if ('geschlechterforschung'.indexOf(input) != -1) arr.push('DE-38-007', 'DE-38-420');
        if ('geschlechtskrankheiten'.indexOf(input) != -1) arr.push('DE-38-009');
        if ('gesellschaftsrecht'.indexOf(input) != -1) arr.push('DE-38-218', 'DE-38-230', 'DE-38-231');
        if ('gesis'.indexOf(input) != -1) arr.push('DE-38-587');
        if ('gestik'.indexOf(input) != -1) arr.push('DE-38-007');
        if ('gesundheitsrecht'.indexOf(input) != -1) arr.push('DE-38-225');
        if ('gewerblicher rechtsschutz'.indexOf(input) != -1) arr.push('DE-38-222', 'DE-38-230');
        if ('gleichstellungsbeauftragte'.indexOf(input) != -1) arr.push('DE-38-007');
        if ('großbritatnien geschichte england'.indexOf(input) != -1) arr.push('DE-38-422');

        /* H */
        if ('hagiographie'.indexOf(input) != -1) arr.push('DE-38-461');
        if ('handel'.indexOf(input) != -1) arr.push('DE-38-112', 'DE-38-124', 'DE-38-156');
        if ('handelsforschung'.indexOf(input) != -1) arr.push('DE-38-159');
        if ('handelsrecht'.indexOf(input) != -1) arr.push('DE-38-218', 'DE-38-230');
        if ('hauptseminar'.indexOf(input) != -1) arr.push('DE-38-201');
        if ('heilpädagogik'.indexOf(input) != -1) arr.push('DE-38-302');
        if ('historische musikwissenschaft'.indexOf(input) != -1) arr.push('DE-38-430');
        if ('historisches institut'.indexOf(input) != -1) arr.push('DE-38-420', 'DE-38-421', 'DE-38-422', 'DE-38-423', 'DE-38-425', 'DE-38-306');
        if ('hochschuldidaktik'.indexOf(input) != -1) arr.push('DE-38-236');
        if ('homosexuell'.indexOf(input) != -1) arr.push('DE-38-009');
        if ('hörfunk'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('humangenetik'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('humanismus'.indexOf(input) != -1) arr.push('DE-38-434');
        if ('humanwissenschaft'.indexOf(input) != -1) arr.push('DE-38-HWA');
        if ('husserl'.indexOf(input) != -1) arr.push('DE-38-433');

        /* I */
        if ('icao international civil aviation organization'.indexOf(input) != -1) arr.push('DE-38-212');
        if ('immunologie'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('indiologie'.indexOf(input) != -1) arr.push('DE-38-408');
        if ('informatik'.indexOf(input) != -1) arr.push('DE-38-006', 'DE-38-526');
        if ('informationssysteme und kommunikationssysteme'.indexOf(input) != -1) arr.push('DE-38-110');
        if ('international investment law center cologne'.indexOf(input) != -1) arr.push('DE-38-227');
        if ('international peace and security law'.indexOf(input) != -1) arr.push('DE-38-237');
        if ('internationale besteuerung und steuerwettbewerb'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('internationales kolleg morphomata'.indexOf(input) != -1) arr.push('DE-38-467');
        if ('internationales und ausländisches privatrecht'.indexOf(input) != -1) arr.push('DE-38-208');
        if ('internet'.indexOf(input) != -1) arr.push('DE-38-006', 'DE-38-101');
        if ('internetrecht'.indexOf(input) != -1) arr.push('DE-38-222');
        if ('investment law'.indexOf(input) != -1) arr.push('DE-38-227');
        if ('ipr'.indexOf(input) != -1) arr.push('DE-38-208');
        if ('iranistik'.indexOf(input) != -1) arr.push('DE-38-414');
        if ('islamwissenschaft'.indexOf(input) != -1) arr.push('DE-38-414', 'DE-38-435', 'DE-38-437');
        if ('iss'.indexOf(input) != -1) arr.push('DE-38-205', 'DE-38-132');
        if ('italien italienische geschichte'.indexOf(input) != -1) arr.push('DE-38-420');
        if ('italien italienische renaissance literatur'.indexOf(input) != -1) arr.push('DE-38-434');

        /* J */
        if ('japanologie japanische kulturgeschichte'.indexOf(input) != -1) arr.push('DE-38-459');
        if ('jubiläumsschriften'.indexOf(input) != -1) arr.push('DE-38-102');
        if ('judaistik'.indexOf(input) != -1) arr.push('DE-38-415');
        if ('jugendliteratur'.indexOf(input) != -1) arr.push('DE-38-323');
        // Juristisches Lernen und Lehren 38/236

        /* K */
        if ('kanadische literatur'.indexOf(input) != -1) arr.push('DE-38-411');
        if ('kanonisches recht'.indexOf(input) != -1) arr.push('DE-38-209');
        if ('karibik'.indexOf(input) != -1) arr.push('DE-38-423');
        if ('karibische literatur'.indexOf(input) != -1) arr.push('DE-38-411');
        if ('kartellrecht'.indexOf(input) != -1) arr.push('DE-38-215', 'DE-38-230');
        // Katholische Theologie 38/311, 38/325, 38/622
        if ('kinderarmut'.indexOf(input) != -1) arr.push('DE-38-308');
        if ('kinderliteratur'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('kirchenrecht'.indexOf(input) != -1) arr.push('DE-38-209');
        // Klassische Philologie 38/404
        if ('klimatologie'.indexOf(input) != -1) arr.push('DE-38-540');
        if ('kolonialgeschichte europäische'.indexOf(input) != -1) arr.push('DE-38-423');
        if ('kommunikationsrecht'.indexOf(input) != -1) arr.push('DE-38-222');
        if ('kooperation'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('nonprofit-bericht kooperationsforschung'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('koptologie'.indexOf(input) != -1) arr.push('DE-38-416');
        if ('kosmochemie'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('kriminologie'.indexOf(input) != -1) arr.push('DE-38-223');
        if ('kristallographie'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('kuga kulturen und gesellschaften asiens'.indexOf(input) != -1) arr.push('DE-38-459');
        if ('kundenmanagement'.indexOf(input) != -1) arr.push('DE-38-156');
        // Kunst und Textil 38/319, 38/320
        if ('kunstgeschichte'.indexOf(input) != -1) arr.push('DE-38-428');
        // Kunstgeschichte (lateinamerikanische) 38/423
        // Kunsthistorisches Institut 38/428, 38/445

        /* L */
        if ('lateinamerika'.indexOf(input) != -1) arr.push('DE-38-423');
        // Lehrstuhl für Bürgerliches Recht, Wirtschafts- und Anwaltsrecht 38/232
        if ('leibniz institut für sozialwissenschaften'.indexOf(input) != -1) arr.push('DE-38-141');
        if ('lektüre'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('lesbisch'.indexOf(input) != -1) arr.push('DE-38-009');
        if ('lesen'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('liederbücher'.indexOf(input) != -1) arr.push('DE-38-324');
        if ('linguistik'.indexOf(input) != -1) arr.push('DE-38-405', 'DE-38-409', 'DE-38-410', 'DE-38-465');
        // Linguistik (afrikanische) 38/419
        // Literatur (Italien) 38/434
        // Literatur (Spätantike) 38/461
        if ('literaturwissenschaft'.indexOf(input) != -1) arr.push('DE-38-405', 'DE-38-411');
        if ('lizenzvertragsrecht'.indexOf(input) != -1) arr.push('DE-38-230');
        if ('logistik'.indexOf(input) != -1) arr.push('DE-38-110', 'DE-38-155');
        // Luft- und Weltraumrecht 38/212
        if ('luther'.indexOf(input) != -1) arr.push('DE-38-325');

        /* M */
        if ('mädchenliteratur'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('markenrecht'.indexOf(input) != -1) arr.push('DE-38-230');
        if ('markenmanagement'.indexOf(input) != -1) arr.push('DE-38-124');
        if ('marketing'.indexOf(input) != -1) arr.push('DE-38-112', 'DE-38-124', 'DE-38-156', 'DE-38-158');
        if ('marktforschung'.indexOf(input) != -1) arr.push('DE-38-112');
        // Martin-Buber-Institut für Judaistik 38/415
        if ('mathematik'.indexOf(input) != -1) arr.push('DE-38-315', 'DE-38-501');
        if ('mausgenetik'.indexOf(input) != -1) arr.push('DE-38-503');
        // Max-Bruch-Archiv 38/430
        // Max Freiherr von Oppenheim-Stiftung 38/435
        if ('mediävistik'.indexOf(input) != -1) arr.push('DE-38-405');
        if ('medien'.indexOf(input) != -1) arr.push('DE-38-101', 'DE-38-323');
        if ('medienforschung'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('medienkulturwissenschaft'.indexOf(input) != -1) arr.push('DE-38-429', 'DE-38-448');
        if ('medienökonomie'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('medienpädagogik'.indexOf(input) != -1) arr.push('DE-38-323');
        if ('medienrecht'.indexOf(input) != -1) arr.push('DE-38-222');
        if ('medienwissenschaft'.indexOf(input) != -1) arr.push('DE-38-429', 'DE-38-448');
        if ('medizin'.indexOf(input) != -1) arr.push('ZB MED');
        if ('medizinsoziologie'.indexOf(input) != -1) arr.push('DE-38-328');
        if ('meister eckhart'.indexOf(input) != -1) arr.push('DE-38-432');
        if ('messe'.indexOf(input) != -1) arr.push('DE-38-112', 'DE-38-124');
        if ('messewirtschaft'.indexOf(input) != -1) arr.push('DE-38-158');
        if ('meteorologie'.indexOf(input) != -1) arr.push('DE-38-540');
        if ('migration'.indexOf(input) != -1) arr.push('DE-38-308');
        if ('mineralogie'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('mittelalter'.indexOf(input) != -1) arr.push('DE-38-420');
        if ('mittelalter philosophie'.indexOf(input) != -1) arr.push('DE-38-432');
        if ('mittelamerika'.indexOf(input) != -1) arr.push('DE-38-423');
        if ('mittellateinische literatur sprache'.indexOf(input) != -1) arr.push('DE-38-461');
        // Modellkolleg Bildungswissenschaften 38/327
        if ('molekularbiologie'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('molekulargenetik'.indexOf(input) != -1) arr.push('DE-38-503');
        if ('morphometa'.indexOf(input) != -1) arr.push('DE-38-467');
        if ('musikethnologie'.indexOf(input) != -1) arr.push('DE-38-324', 'DE-38-430');
        if ('musikpädagogik'.indexOf(input) != -1) arr.push('DE-38-321');
        if ('musikwissenschaft'.indexOf(input) != -1) arr.push('DE-38-321', 'DE-38-430');

        /* N */
        if ('nationalismusforschung'.indexOf(input) != -1) arr.push('DE-38-420');
        if ('neue medien'.indexOf(input) != -1) arr.push('DE-38-101');
        // Neue Medien 38/101
        if ('neulatein'.indexOf(input) != -1) arr.push('DE-38-462');
        // Neulateinische Literatur 38/434
        // Neuzeitliche Geschichte 38/420
        if ('nicolaus cusanus'.indexOf(input) != -1) arr.push('DE-38-432');
        if ('niederlandistik'.indexOf(input) != -1) arr.push('DE-38-406');
        if ('nordische philologie'.indexOf(input) != -1) arr.push('DE-38-407');
        if ('nordistik'.indexOf(input) != -1) arr.push('DE-38-407');
        if ('nubienkulturen'.indexOf(input) != -1) arr.push('DE-38-416');
        if ('numismatik'.indexOf(input) != -1) arr.push('DE-38-404');

        /* O */
        if ('öffentliche finanzwirtschaft'.indexOf(input) != -1) arr.push('DE-38-101');
        // Öffentliches Recht 38/213
        if ('ökonometrie'.indexOf(input) != -1) arr.push('DE-38-140');
        if ('ökumene'.indexOf(input) != -1) arr.push('DE-38-325');
        if ('operations research'.indexOf(input) != -1) arr.push('DE-38-110');
        // Oppenheim-Stiftung 38/435
        if ('organisation'.indexOf(input) != -1) arr.push('DE-38-108');
        if ('organisationsseminar'.indexOf(input) != -1) arr.push('DE-38-108');
        // Orientalisches Seminar 38/414
        if ('ostasiatisches seminar'.indexOf(input) != -1) arr.push('DE-38-450', 'DE-38-459');
        if ('osteuropa'.indexOf(input) != -1) arr.push('DE-38-425');
        // Europäisches Recht 38/219
        if ('ostrecht'.indexOf(input) != -1) arr.push('DE-38-219');

        /* P */
        if ('pädagogik'.indexOf(input) != -1) arr.push('DE-38-303', 'DE-38-304', 'DE-38-403');
        if ('paläontologie'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('patentrecht'.indexOf(input) != -1) arr.push('DE-38-230');
        if ('papyrologie'.indexOf(input) != -1) arr.push('DE-38-404');
        // Peace and Security Law 38/237
        if ('persönlichkeitsrecht'.indexOf(input) != -1) arr.push('DE-38-222');
        if ('petrarca'.indexOf(input) != -1) arr.push('DE-38-434');
        if ('petrologie'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('phänomenologie'.indexOf(input) != -1) arr.push('DE-38-433');
        if ('philologie klassische'.indexOf(input) != -1) arr.push('DE-38-404');
        if ('philosophie'.indexOf(input) != -1) arr.push('DE-38-401', 'DE-38-432', 'DE-38-433');
        // Philosophisches Seminar 38/401
        if ('phonetik'.indexOf(input) != -1) arr.push('DE-38-410');
        if ('physik'.indexOf(input) != -1) arr.push('DE-38-502');
        // Physikalische Chemie 38/509
        if ('platon'.indexOf(input) != -1) arr.push('DE-38-432');
        if ('polen'.indexOf(input) != -1) arr.push('DE-38-425');
        if ('politikwissenschaft'.indexOf(input) != -1) arr.push('DE-38-308', 'DE-38-125');
        // Politische Presse 38/421
        // Politische Wissenschaft 38/125
        if ('popularmusik'.indexOf(input) != -1) arr.push('DE-38-430');
        if ('portugal'.indexOf(input) != -1) arr.push('DE-38-423');
        // Portugiesisch-Brasilianisches Institut 38/413
        if ('presse'.indexOf(input) != -1) arr.push('DE-38-421');
        if ('presserecht'.indexOf(input) != -1) arr.push('DE-38-222');
        // Privatrecht (internationales und ausländisches) 38/208
        // Privatrechtsgeschichte (neuere) 38/216 
        if ('produktion produktionsplanung produktionssteuerung'.indexOf(input) != -1) arr.push('DE-38-110');
        if ('produktpolitik'.indexOf(input) != -1) arr.push('DE-38-112');
        if ('prosodie'.indexOf(input) != -1) arr.push('DE-38-410');
        if ('psychologie'.indexOf(input) != -1) arr.push('DE-38-305');
        if ('psychologische tests'.indexOf(input) != -1) arr.push('DE-38-326');
        if ('public economics'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('publizistik'.indexOf(input) != -1) arr.push('DE-38-421');

        /* Q */
        if ('quantitative methoden statistik'.indexOf(input) != -1) arr.push('DE-38-140');
        if ('quartärgeologie'.indexOf(input) != -1) arr.push('DE-38-514');

        /* R */
        if ('rechenzentrum'.indexOf(input) != -1) arr.push('DE-38-006');
        if ('rechnungslegung'.indexOf(input) != -1) arr.push('DE-38-117');
        // Recht (ausländisches öffentliches) 38/207
        // Recht (US-amerikanisches) 38/235
        // Recht der Europäischen Gemeinschaften 38/215
        if ('rechtsdidaktik'.indexOf(input) != -1) arr.push('DE-38-236');
        if ('rechtsextremismus'.indexOf(input) != -1) arr.push('DE-38-308');
        // Rechtsgeschichte (deutsche und rheinische) 38/216
        // Rechtslinguistik (europäische) 38/468
        if ('rechtspolitik'.indexOf(input) != -1) arr.push('DE-38-211');
        if ('rechtssprachen'.indexOf(input) != -1) arr.push('DE-38-468');
        if ('rechtstheorie'.indexOf(input) != -1) arr.push('DE-38-234');
        if ('rechtsvergleichung'.indexOf(input) != -1) arr.push('DE-38-206', 'DE-38-208', 'DE-38-219');
        if ('rechtswissenschaft'.indexOf(input) != -1) arr.push('DE-38-201');
        // Rechtswissenschaftliches Seminar 38/201
        if ('rehabilitätspädagogik'.indexOf(input) != -1) arr.push('DE-38-302');
        if ('rehabilitätswissenschaft'.indexOf(input) != -1) arr.push('DE-38-328');
        if ('religionslehre'.indexOf(input) != -1) arr.push('DE-38-622');
        if ('renaissance'.indexOf(input) != -1) arr.push('DE-38-434');
        if ('rheinische musikgeschichte'.indexOf(input) != -1) arr.push('DE-38-430');
        // Rheinland (Landesgeschichte) 38/420
        if ('risikomanagement'.indexOf(input) != -1) arr.push('DE-38-123');
        if ('romanistik'.indexOf(input) != -1) arr.push('DE-38-412', 'DE-38-413', 'DE-38-434');
        // Römisches Recht 38/214
        if ('rrzk'.indexOf(input) != -1) arr.push('DE-38-006');
        if ('rundfunk'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('rundfunkökonomie'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('rundfunkrecht'.indexOf(input) != -1) arr.push('DE-38-222');
        if ('russland'.indexOf(input) != -1) arr.push('DE-38-425');

        /* S */
        if ('schmalenbach-biblitohek '.indexOf(input) != -1) arr.push('DE-38-102'); // Schmalenbach-Bibliothek
        if ('schulforschung'.indexOf(input) != -1) arr.push('DE-38-304');
        if ('schulpädagogik'.indexOf(input) != -1) arr.push('DE-38-304');
        if ('schwul'.indexOf(input) != -1) arr.push('DE-38-009');
        if ('sexualpolitik'.indexOf(input) != -1) arr.push('DE-38-007');
        if ('simulation'.indexOf(input) != -1) arr.push('DE-38-110');
        if ('skandinavistik'.indexOf(input) != -1) arr.push('DE-38-407');
        if ('slavistik'.indexOf(input) != -1) arr.push('DE-38-418');
        if ('sonderpädagogik'.indexOf(input) != -1) arr.push('DE-38-302');
        if ('sozialforschung (angewandte)'.indexOf(input) != -1) arr.push('DE-38-132'); // Sozialforschung (angewandte) 38/132
        if ('sozialgeographie'.indexOf(input) != -1) arr.push('DE-38-136');
        if ('sozialpädagogik'.indexOf(input) != -1) arr.push('DE-38-134');
        if ('sozialpolitik'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('sozialpsychologie'.indexOf(input) != -1) arr.push('DE-38-132', 'DE-38-305');
        // Sozialrecht (deutsches und europäisches) 38/203
        if ('sozialstatistik'.indexOf(input) != -1) arr.push('DE-38-139', 'DE-38-140');
        if ('sozialwissenschaften'.indexOf(input) != -1) arr.push('DE-38-132', 'DE-38-308', 'DE-38-309', 'DE-38-310', 'DE-38-587');
        if ('soziologie'.indexOf(input) != -1) arr.push('DE-38-132', 'DE-38-309');
        if ('spanien'.indexOf(input) != -1) arr.push('DE-38-423');
        if ('spätantike literatur'.indexOf(input) != -1) arr.push('DE-38-461');
        if ('sprachlabor'.indexOf(input) != -1) arr.push('DE-38-466');
        // Sprachliche Informationsverarbeitung 38/465
        if ('sprachwissenschaft'.indexOf(input) != -1) arr.push('DE-38-405', 'DE-38-409', 'DE-38-411');
        if ('stastskirchenrecht'.indexOf(input) != -1) arr.push('DE-38-209');
        if ('staatsphilosophie'.indexOf(input) != -1) arr.push('DE-38-211');
        if ('staatsrecht'.indexOf(input) != -1) arr.push('DE-38-213', 'DE-38-225', 'DE-38-228');
        if ('staatsverschuldung'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('staatswissenschaft'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('statistik'.indexOf(input) != -1) arr.push('DE-38-139', 'DE-38-140', 'DE-38-501');
        if ('std'.indexOf(input) != -1) arr.push('DE-38-009'); // STD (Sexually Transmitted Diseases) 38/009
        if ('steuerberatung'.indexOf(input) != -1) arr.push('DE-38-118');
        if ('steuerlehre (betriebswirtschaftliche)'.indexOf(input) != -1) arr.push('DE-38-117'); // Steuerlehre (betriebswirtschaftliche) 38/117
        // Steuerpolitik u. -theorie 38/101
        if ('steuerrecht'.indexOf(input) != -1) arr.push('DE-38-210', 'DE-38-231');
        if ('steuerseminar'.indexOf(input) != -1) arr.push('DE-38-117');
        if ('stochastik'.indexOf(input) != -1) arr.push('DE-38-501');
        if ('strafrecht'.indexOf(input) != -1) arr.push('DE-38-208');
        // Strafrecht (ausländisches und internationales) 38/206
        if ('strafprozessrecht'.indexOf(input) != -1) arr.push('DE-38-205');
        if ('sudankulturen'.indexOf(input) != -1) arr.push('DE-38-416');
        if ('südamerika'.indexOf(input) != -1) arr.push('DE-38-423');
        // Supply Chain Managemant 38/110
        if ('systematische musikwissenschaft'.indexOf(input) != -1) arr.push('DE-38-430');
        // Strafrecht (ausländisches und internationales) 38/206

        /* T */
        if ('tamilistik'.indexOf(input) != -1) arr.push('DE-38-408');
        if ('telekommunikationsrecht'.indexOf(input) != -1) arr.push('DE-38-222');
        if ('testothek'.indexOf(input) != -1) arr.push('DE-38-326');
        if ('textilgestaltung'.indexOf(input) != -1) arr.push('DE-38-320');
        if ('textilwissenschaft'.indexOf(input) != -1) arr.push('DE-38-320');
        if ('theatergeschichte'.indexOf(input) != -1) arr.push('DE-38-429');
        if ('theaterwissenschaft'.indexOf(input) != -1) arr.push('DE-38-429', 'DE-38-448');
        // Theaterwissenschaftliche Sammlung 38/429
        // Theologie, evangelisch 38/311, 38/623 
        // Theologie, katholisch 38/311, 38/325, 38/622
        if ('thomas von aquin'.indexOf(input) != -1) arr.push('DE-38-432');
        // Thomas von Aquin 38/432
        // Thomas-Institut 38/432
        if ('transgender'.indexOf(input) != -1) arr.push('DE-38-009');
        if ('transsexuell'.indexOf(input) != -1) arr.push('DE-38-009');
        if ('treuhandseminar'.indexOf(input) != -1) arr.push('DE-38-118');
        if ('tv'.indexOf(input) != -1) arr.push('DE-38-101');

        /* U */
        if ('ukraine'.indexOf(input) != -1) arr.push('DE-38-425');
        if ('umfrageergebnisse'.indexOf(input) != -1) arr.push('DE-38-141');
        if ('umweltökonomie'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('umweltpolitik'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('umweltrecht'.indexOf(input) != -1) arr.push('DE-38-220');
        if ('ungarn'.indexOf(input) != -1) arr.push('DE-38-425');
        // Universitätsarchiv 38/005
        if ('universitäts und stadtbibliothek'.indexOf(input) != -1) arr.push('DE-38');
        if ('unternehmensentwicklung'.indexOf(input) != -1) arr.push('DE-38-108');
        if ('unternehmensführung'.indexOf(input) != -1) arr.push('DE-38-155');
        if ('unternehmensrechnug'.indexOf(input) != -1) arr.push('DE-38-160');
        // Ur- und Frühgeschichte 38/426, 38/438
        if ('urheberrecht'.indexOf(input) != -1) arr.push('DE-38-222', 'DE-38-230');
        // US-amerikanisches Recht 38/235
        // USA (Geschichte) 38/422

        /* V */
        if ('varietätenlinguistik'.indexOf(input) != -1) arr.push('DE-38-468');
        if ('verfahrensrecht'.indexOf(input) != -1) arr.push('DE-38-221');
        if ('verfassungsrecht'.indexOf(input) != -1) arr.push('DE-38-228');
        // Vergleichende Bildungsforschung und Sozialwissenschaften 38/310
        if ('versicherungslehre'.indexOf(input) != -1) arr.push('DE-38-123');
        if ('versicherungsmathematik'.indexOf(input) != -1) arr.push('DE-38-123');
        if ('versicherungsrecht'.indexOf(input) != -1) arr.push('DE-38-123', 'DE-38-218');
        if ('versicherungswesen'.indexOf(input) != -1) arr.push('DE-38-123');
        if ('versicherungswirtschaft'.indexOf(input) != -1) arr.push('DE-38-123');
        if ('versicherungswissenschaft'.indexOf(input) != -1) arr.push('DE-38-123', 'DE-38-218');
        if ('versorgungsforschung'.indexOf(input) != -1) arr.push('DE-38-328');
        if ('verwaltungslehre'.indexOf(input) != -1) arr.push('DE-38-213', 'DE-38-228');
        if ('verwaltungsrecht'.indexOf(input) != -1) arr.push('DE-38-228');
        if ('völkerkunde'.indexOf(input) != -1) arr.push('DE-38-431');
        if ('völkerrecht'.indexOf(input) != -1) arr.push('DE-38-207', 'DE-38-212', 'DE-38-219');
        // Volkswirtschaftslehre / Gemeinsame Fachbibliothek 38/101
        // VWL Fachbibliothek 38/101

        /* W */
        if ('wahlforschung'.indexOf(input) != -1) arr.push('DE-38-141');
        if ('währungspolitik'.indexOf(input) != -1) arr.push('DE-38-107');
        if ('weltraumforschung'.indexOf(input) != -1) arr.push('DE-38-514');
        if ('weltraumrecht'.indexOf(input) != -1) arr.push('DE-38-212');
        if ('wettbewerbsrecht'.indexOf(input) != -1) arr.push('DE-38-215', 'DE-38-222', 'DE-38-230');
        // Wirtschaftsarchiv 38/102
        if ('wirtschaftsforschung'.indexOf(input) != -1) arr.push('DE-38-171');
        if ('wirtschaftsgeographie'.indexOf(input) != -1) arr.push('DE-38-136');
        if ('wirtschaftsinformatik'.indexOf(input) != -1) arr.push('DE-38-526');
        if ('wirtschaftsmathematik'.indexOf(input) != -1) arr.push('DE-38-501');
        if ('wirtschaftspädagogik'.indexOf(input) != -1) arr.push('DE-38-134');
        if ('wirtschaftspolitik'.indexOf(input) != -1) arr.push('DE-38-101', 'DE-38-107');
        if ('wirtschaftsprüfung'.indexOf(input) != -1) arr.push('DE-38-118');
        if ('wirtschaftspsychologie'.indexOf(input) != -1) arr.push('DE-38-305');
        if ('wirtschaftsrecht'.indexOf(input) != -1) arr.push('DE-38-204', 'DE-38-212', 'DE-38-215', 'DE-38-218', 'DE-38-232');
        if ('wirtschaftsstatistik'.indexOf(input) != -1) arr.push('DE-38-140', 'DE-38-139');
        if ('wirtschaftstheorie'.indexOf(input) != -1) arr.push('DE-38-101');
        if ('wirtschaftswissenschaften'.indexOf(input) != -1) arr.push('DE-38-310');
        if ('wirtschaftsrecht'.indexOf(input) != -1) arr.push('DE-38-224', 'DE-38-228');
        if ('wohneigentum wohnungspolitik wohnungsrecht wohnungswirtschaft'.indexOf(input) != -1) arr.push('DE-38-101');

        /* X/Y/Z */
        if ('zeitschriften'.indexOf(input) != -1) arr.push('DE-38-421');
        if ('zeitung'.indexOf(input) != -1) arr.push('DE-38-421');
        if ('zoologie'.indexOf(input) != -1) arr.push('DE-38-503');


    }
    arr1 = sortByFrequency(arr);

    return arr1.byCount();
}


// Feiertag mit festem Datum
// Schema -> DD.MM
var feiertage = [
    '01.01',
    '01.05',
    '03.10',
    '01.11',
    '25.12',
    '26.12'
];

// Semester und Semesterfreien Zeiten bis SS 2022
// Schema -> YYYYMMDD
var semesterZeit = [
    // SS 2017
    {
        von: 20170418,
        bis: 20170728
    },
    // WS 2017/18
    {
        von: 20171009,
        bis: 20180202
    },
    // SS 2018
    {
        von: 20180409,
        bis: 20180720
    },
    // WS 2018/19
    {
        von: 20181008,
        bis: 20190201
    },
    // SS 2019
    {
        von: 20190401,
        bis: 20190712
    },
    // WS 2019/20
    {
        von: 20191007,
        bis: 20200131
    },
    // SS 2020
    {
        von: 20200406,
        bis: 20200717
    },
    // WS 2020/21
    {
        von: 20201005,
        bis: 20210129
    },
    // SS 2021 
    {
        von: 20210412,
        bis: 20210723
    },
    // WS 2021/22
    {
        von: 20211004,
        bis: 20220128
    },
    // SS 2022
    {
        von: 22220404,
        bis: 20220715
    }
];

    

    /**
    * Alle Filter zurück setzen , aktuelle Uhrzeit und aktuellen Tag schalten
    */
    function setTimeNow() {

        // wieder aktuelle Uhrzeit in Uhrzeitfeld schreiben
        var now = new Date();
        $('#textZeitWahl').html(now.getHours() + ':' + addZero(now.getMinutes()) + " Uhr");

        $('#tageChoice').val(9);
        var d = new Date();

        gewaehlterTag = d.getDay() - 1;
        $('#rangevalue').val(dates('stunde') * 60);
        gewaehlteZeit = dates('uhrzeit');
        resetInst();
        resetArt();
        $('#geoeffnet').prop('checked', false);
        $('#showMarkerText').prop('checked', false)
		showMarkerText = false;
		
        calcMarkers(9, false);
    }

    

   


    /********************** bouncemarker.js *************/
    /**
     * Copyright (C) 2013 Maxime Hadjinlian <maxime.hadjinlian@gmail.com>
     * All Rights Reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright notice,
     *   this list of conditions and the following disclaimer in the documentation
     *   and/or other materials provided with the distribution.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     */

    (function() {

        // Retain the value of the original onAdd and onRemove functions
        var originalOnAdd = L.Marker.prototype.onAdd;
        var originalOnRemove = L.Marker.prototype.onRemove;

        // Add bounceonAdd options
        L.Marker.mergeOptions({
            bounceOnAdd: false,
            bounceOnAddOptions: {
                duration: 1000,
                height: -1
            },
            bounceOnAddCallback: function() {}
        });

        L.Marker.include({

            _toPoint: function(latlng) {
                return this._map.latLngToContainerPoint(latlng);
            },
            _toLatLng: function(point) {
                return this._map.containerPointToLatLng(point);
            },

            _motionStep: function(timestamp, opts) {
                var self = this;
                var timePassed = new Date() - opts.start;
                var progress = timePassed / opts.duration;

                if (progress > 1) {
                    progress = 1;
                }
                var delta = self._easeOutBounce(progress);
                opts.step(delta);

                if (progress === 1) {
                    opts.end();
                    return;
                }

                L.Util.requestAnimFrame(function(timestamp) {
                    self._motionStep(timestamp, opts);
                });
            },

            _bounceMotion: function(duration, callback) {
                var original = L.latLng(this._origLatlng);
                var start_y = this._dropPoint.y;
                var start_x = this._dropPoint.x;
                var distance = this._point.y - start_y;
                var self = this;

                L.Util.requestAnimFrame(function(timestamp) {
                    self._motionStep(timestamp, {
                        delay: 10,
                        duration: duration || 1000, // 1 sec by default
                        start: new Date(),
                        step: function(delta) {
                            self._dropPoint.y =
                                start_y +
                                (distance * delta) -
                                (self._map.project(self._map.getCenter()).y - self._origMapCenter.y);
                            self._dropPoint.x =
                                start_x -
                                (self._map.project(self._map.getCenter()).x - self._origMapCenter.x);
                            self.setLatLng(self._toLatLng(self._dropPoint));
                        },
                        end: function() {
                            self.setLatLng(original);
                            if (typeof callback === "function") callback();
                        }
                    });
                });
            },

            // Many thanks to Robert Penner for this function
            _easeOutBounce: function(pos) {
                if ((pos) < (1 / 2.75)) {
                    return (7.5625 * pos * pos);
                } else if (pos < (2 / 2.75)) {
                    return (7.5625 * (pos -= (1.5 / 2.75)) * pos + 0.75);
                } else if (pos < (2.5 / 2.75)) {
                    return (7.5625 * (pos -= (2.25 / 2.75)) * pos + 0.9375);
                } else {
                    return (7.5625 * (pos -= (2.625 / 2.75)) * pos + 0.984375);
                }
            },

            // Bounce : if options.height in pixels is not specified, drop from top.
            // If options.duration is not specified animation is 1s long.
            bounce: function(options, endCallback) {
                this._origLatlng = this.getLatLng();
                this._bounce(options, endCallback);
            },

            _bounce: function(options, endCallback) {
                if (typeof options === "function") {
                    endCallback = options;
                    options = null;
                }
                options = options || {
                    duration: 1000,
                    height: -1
                };

                //backward compatibility
                if (typeof options === "number") {
                    options.duration = arguments[0];
                    options.height = arguments[1];
                }

                // Keep original map center
                this._origMapCenter = this._map.project(this._map.getCenter());
                this._dropPoint = this._getDropPoint(options.height);
                this._bounceMotion(options.duration, endCallback);
            },

            // This will get you a drop point given a height.
            // If no height is given, the top y will be used.
            _getDropPoint: function(height) {
                // Get current coordidates in pixel
                this._point = this._toPoint(this._origLatlng);
                var top_y;
                if (height === undefined || height < 0) {
                    top_y = this._toPoint(this._map.getBounds()._northEast).y;
                } else {
                    top_y = this._point.y - height;
                }
                return new L.Point(this._point.x, top_y);
            },

            onAdd: function(map) {
                this._map = map;
                // Keep original latitude and longitude
                this._origLatlng = this._latlng;

                // We need to have our drop point BEFORE adding the marker to the map
                // otherwise, it would create a flicker. (The marker would appear at final
                // location then move to its drop location, and you may be able to see it.)
                if (this.options.bounceOnAdd === true) {
                    // backward compatibility
                    if (typeof this.options.bounceOnAddDuration !== "undefined") {
                        this.options.bounceOnAddOptions.duration = this.options.bounceOnAddDuration;
                    }

                    // backward compatibility
                    if (typeof this.options.bounceOnAddHeight !== "undefined") {
                        this.options.bounceOnAddOptions.height = this.options.bounceOnAddHeight;
                    }

                    this._dropPoint = this._getDropPoint(this.options.bounceOnAddOptions.height);
                    this.setLatLng(this._toLatLng(this._dropPoint));
                }

                // Call leaflet original method to add the Marker to the map.
                originalOnAdd.call(this, map);

                if (this.options.bounceOnAdd === true) {
                    this._bounce(this.options.bounceOnAddOptions, this.options.bounceOnAddCallback);
                }
            },

            onRemove: function(map) {
                clearInterval(this._intervalId);
                originalOnRemove.call(this, map);
            }
        });
    })();
	
	
	
	
	
	
	
	
    

   

	 function initInsts() {
        return [
[%-

   is_blacklisted = { 
                 'DE-38-103' = 1 
                 'DE-38-104' = 1 
                 'DE-38-105' = 1 
#                 'DE-38-108' = 1 
                 'DE-38-113' = 1 
                 'DE-38-120' = 1 
                 'DE-38-121' = 1 
                 'DE-38-127' = 1 
                 'DE-38-128' = 1 
                 'DE-38-146' = 1 
                 'DE-38-157' = 1 
                 'DE-38-159' = 1 
                 'DE-38-166' = 1 
                 'DE-38-464' = 1 
   };

   koordinaten = [];
   
   FOREACH location IN locations ;
    NEXT IF (is_blacklisted.${location.identifier});

    coordinates = location.fields.${"L0280"}.first.content.split(',').reverse.join(',');
    sigel       = location.identifier ;
    description = location.description ;
    art         = location.fields.${"L0180"}.first.content;
    url         = location.fields.${"L0090"}.first.content;
    arbeitsplaetze = location.fields.${"L0270"}.first.content;
    zeiten      = 'wg. Corona geschlossen';#location.fields.${"L0110"}.first.content;
    IF art.match('Präsenz');
       art = "Präsenz";
    ELSIF art.match('Ausleih');
       art = "Ausleih";
    END;

    IF coordinates ; %]
      {
        sigel: "[% sigel %]",
        name: "[% description %]",
        art: "[% art %]",
        url: '[% url %]',
        arbeitsplaetze: "[% arbeitsplaetze %]",
        zeiten: '[% zeiten %]',
      },
[%
    koordinaten.push(coordinates);
    END ;
   END ;%]    
        ];
    }

    function initCoords() {
        // Bibliothekskoordinaten
        return [
      [% FOREACH koord IN koordinaten %]
        [[% koord %]],
      [% END %]
        ];
    }
	
	

   
    window.onload = function(e) {
        map.on('enterFullscreen', function() {
            document.getElementsByClassName('leaflet-control-zoom-fullscreen')[0].style.width = '30px';
            document.getElementsByClassName('leaflet-control-zoom-fullscreen')[0].style.height = '30px';
            document.getElementsByClassName('leaflet-control-zoom-fullscreen')[0].style.zIndex = '0';
            document.getElementsByClassName('leaflet-control-zoom-out')[0].style.display = 'block';
            document.getElementsByClassName('leaflet-control-zoom-in')[0].style.display = 'block';
            mobile = true;
        });
        calculateMapSize(); 

        if (mapWidth == '300px') {
            L.control.custom({
                position: 'bottomleft',
                id: 'informationMobile',
                content: '<img id="dragicon" src="https://www.ub.uni-koeln.de/e12502/e12523/e33478/e40291/dragger_ger.png" height="18" width="120" onclick="dragiconClicked()"/><div class="bib_contentMobile" id="bib_content"></div>',
            }).addTo(map);
        }

        // desktop
        else {
            L.control.custom({
                position: 'topleft',
                id: 'informationDesktop',
                content: '<div class="bib_contentDesktop" id="bib_content" style="max-height: 350px" ></div>',
            }).addTo(map);
            map.setActiveArea({
				name: 'active maptive',
                position: 'absolute',
                top: '50px',
                left: '200px',
                right: '50px',
                height: '460px'
            });
        }
        
		// Listener für Suchfeld
        $('#suche').bind('keyup', function(evt) {
			if (evt.keyCode == 13)
				search_includes(this, true);
			else
				search_includes(this, false);
        });

        addTouchListener();
        $('#einstellungen').hide();
        $('#bib_content').hide();
        map.setView([50.92592326642186, 6.928596496582032], zoomfaktor);

		init('[% locationinfo.identifier %]', '');
		
        document.getElementsByClassName('leaflet-control-zoom-fullscreen')[0].innerHTML = "<img src='https://www.ub.uni-koeln.de/e12502/e12523/e33478/e40293/if_fullscreen_118670_ger.png' style='height: 24px; padding-top: 3px;'/>";
		
        resize();
    }
</script>
[% END %]
[% END %]

<table class="ZMSTable" >
<caption align="top"></caption>
<colgroup>
  <col width="16%">
  <col width="83%">
</colgroup>
<tbody>
[%-

PROCESS common/subtemplate name="visible_categories_location";

thisdbname = config.get_databases_of_isil(locationinfo.identifier).first;

sigel = locationinfo.identifier.replace('DE-38-','');

IF NOT thisdbname ;
  thisdbname = "inst${sigel}";
END;

IF sigel == '123';
  recent_litlists1 = user.get_recent_litlists({database = 'inst123', view = view});
  recent_litlists2 = user.get_recent_litlists({database = 'inst218', view = view});
  recent_litlists = recent_litlists1.merge(recent_litlists2);
ELSIF sigel == '401';
  recent_litlists = user.get_recent_litlists({ userid = 7703 });
ELSE ;
  recent_litlists = user.get_recent_litlists({database = thisdbname, view = view});
END;

litlist_content = [];

IF recent_litlists.size > 0;
  litlist_content.push("<ul>");
  FOREACH litlist IN recent_litlists;
    lecturestring = "" ;
    IF litlist.lecture ;
       lectureinfo   = "Offizielle Literaturliste des Instituts/Seminars";
       lecturestring = "&nbsp;<img src=\"https://search.ub.uni-koeln.de${config.get('university_img')}\" title=\"${lectureinfo}\" alt=\"${lectureinfo}\" style=\"vertical-align:bottom\" />";
    ELSE ;
       lectureinfo   = "Öffentliche Literaturliste von Nutzern";
       lecturestring = "&nbsp;<img src=\"https://search.ub.uni-koeln.de${config.get('persons_img')}\" title=\"${lectureinfo}\" alt=\"${lectureinfo}\" style=\"vertical-align:bottom\" />";
    END ;
    litlist_content.push("<li><a href=\"https://www.ub.uni-koeln.de/usbportal?service=search&kugview=38_${sigel}%7Ckug&fs=litlistid:${litlist.id}\">${litlist.title}</a> (${litlist.itemcount} Titel)${lecturestring}</li>");
  END;
  litlist_content.push("</ul>");
ELSE;
  litlist_content.push("Es wurden noch keine Literaturlisten mit Titeln dieses Kataloges angelegt.");
END;

IF sigel == '123';
  recent_tags1 = user.get_recent_tags({database = 'inst123'});
  recent_tags2 = user.get_recent_tags({database = 'inst218'});
  recent_tags = recent_tags1.merge(recent_tags2);
ELSE ;
  recent_tags = user.get_recent_tags({database = thisdbname});
END;

tags_content = [];

recent_tags = [] ;

IF recent_tags.size > 0;
  tags_content.push("<ul>");
  FOREACH tag IN recent_tags;
    IF tag.tag ;
      tags_content.push("<li><a target=\"kug\" href=\"http://kug.ub.uni-koeln.de/portal/kug/tags/names/id/${tag.tag}.html?l=de\">${tag.tag}</a></li>");
    END ;
  END;
  tags_content.push("</ul>");
ELSE;
  tags_content.push("F&uuml;r Titel in diesem Katalog wurden noch keine Tags vergeben");
END;

no_journals = {
                 '009' = 1
                 '112' = 1
                 '124' = 1
                 '155' = 1
                 '158' = 1
                 '159' = 1
                 '227' = 1
                 '235' = 1
                 '236' = 1
                 '302' = 1
                 '317' = 1
                 '326' = 1
                 '460' = 1
                 '462' = 1
                 '463' = 1
                 '464' = 1
                 '466' = 1
                 '467' = 1
              };

IF NOT no_journals.exists("${sigel}") ;
   locationinfo.fields.${"Zeitschriften"} = [ { content = "Zeitschriftenliste dieser Bibliothek als <a href=\"http://unikatalog.ub.uni-koeln.de/zeitschriftenlisten/zeitschriften-${sigel}-all.pdf\">e-Book</a>" } ];
END ;

IF sigel != 'ARTES' ;
  locationinfo.fields.${"Die 5 zuletzt angelegten Literaturlisten"} = [ { content = litlist_content.join("\n") } ];
  locationinfo.fields.${"Die 5 zuletzt vergebenen Tags"} = [ { content = tags_content.join("\n") } ];
END;

trclass = "even" ;


FOREACH category IN categories;
    IF category == 'Bestand';
       contentarray = [];
       IF locationinfo.fields.${"L0120"}.first.content ;
          thiscontent = locationinfo.fields.${"L0120"}.first.content;
          contentarray.push("Monographien: ${thiscontent}");
       END;
       IF locationinfo.fields.${"L0130"}.first.content ;
          thiscontent = locationinfo.fields.${"L0130"}.first.content;
          contentarray.push("Zeitschriften: ${thiscontent}");
       END;
       IF locationinfo.fields.${"L0140"}.first.content ;
          thiscontent = locationinfo.fields.${"L0140"}.first.content;
          contentarray.push("Lfd. Zeitschriften: ${thiscontent}");
       END;
       IF contentarray.size > 0;
          content = contentarray.join(" / ");
          locationinfo.fields.${"Bestand"} = [ { content = content } ];
       ELSE ;
         NEXT;
       END;
    END;

    IF locationinfo.fields.${category} ;
      FOREACH item IN locationinfo.fields.$category;
        content  = item.content;
        mult     = item.mult;
        subfield = item.subfield;


        # Nachgeschaltete datenbankspezifische Kategorienamen-Mappings sind
        # in Config.pm fuer die entsprechende Datenbank definiert
        # und werden im Message-Katalog als <Kategorie>-<Datenbankname>
        # kodiert.
        thiscategory = category ;
        IF config.get('categorymapping').${locationinfo.databaseinfos.dbname}.$category ;
          thiscategory = "${category}-${record.database}" ;
        END;
-%]
<tr class="[% trclass %]"><td><p>[% msg.maketext("${thiscategory}") %]</p></td><td><p>[% content %]</p></td></tr>
[%-   END ;
      IF trclass == "even" ;
        trclass = "odd";
      ELSE;
        trclass = "even";
      END;
   END ;
END ;-%]
</tbody>
</table>

<p style="font-size:0.8em;">
<b>Hinweis:</b> Diese Informationen beruhen auf Selbstangaben der
Campusbibliotheken und entsprechen dem uns jeweils zuletzt mitgeteilten
Stand. Bitte wenden Sie sich bei etwaigen Unstimmigkeiten direkt an
die jeweilige Bibliothek.
</p>

